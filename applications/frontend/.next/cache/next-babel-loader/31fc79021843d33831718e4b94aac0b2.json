{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon } from 'react-leaflet';\n\nfunction mapPositionFromCoordinates(coordinates) {\n  if (coordinates && coordinates.length) {\n    return {\n      lat: coordinates[0].latitude,\n      lng: coordinates[0].longitude\n    };\n  }\n}\n\nvar Map = function Map(_ref) {\n  _s();\n\n  var location = _ref.location,\n      _ref$initialZoom = _ref.initialZoom,\n      initialZoom = _ref$initialZoom === void 0 ? 15 : _ref$initialZoom;\n  var coordinates = location === null || location === void 0 ? void 0 : location.coordinates;\n\n  var _useState = useState(mapPositionFromCoordinates(coordinates)),\n      position = _useState[0];\n\n  var _useState2 = useState(initialZoom),\n      zoom = _useState2[0];\n\n  var polygon = location.map(function (coordinate) {\n    return [coordinate.latitude, coordinate.longitude];\n  });\n  return __jsx(MapLeaflet, {\n    center: position,\n    zoom: zoom,\n    style: {\n      height: '700px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), __jsx(Polygon, {\n    positions: polygon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Map, \"9pOwZK8Mq8PA64iWRIiO1sFUDN0=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","TileLayer","Polygon","mapPositionFromCoordinates","coordinates","length","lat","latitude","lng","longitude","location","initialZoom","position","zoom","polygon","map","coordinate","height"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,QAAsD,eAAtD;;AAUA,SAASC,0BAAT,CAAoCC,WAApC,EAAmE;AACjE,MAAIA,WAAW,IAAIA,WAAW,CAACC,MAA/B,EAAuC;AACrC,WAAO;AAAEC,MAAAA,GAAG,EAAEF,WAAW,CAAC,CAAD,CAAX,CAAeG,QAAtB;AAAgCC,MAAAA,GAAG,EAAEJ,WAAW,CAAC,CAAD,CAAX,CAAeK;AAApD,KAAP;AACD;AACF;;AAED,IAAMV,GAAG,GAAG,SAANA,GAAM,OAA2D;AAAA;;AAAA,MAAxDW,QAAwD,QAAxDA,QAAwD;AAAA,8BAA9CC,WAA8C;AAAA,MAA9CA,WAA8C,iCAAhC,EAAgC;AACrE,MAAMP,WAAW,GAAGM,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEN,WAA9B;;AADqE,kBAGlDN,QAAQ,CAACK,0BAA0B,CAACC,WAAD,CAA3B,CAH0C;AAAA,MAG9DQ,QAH8D;;AAAA,mBAItDd,QAAQ,CAACa,WAAD,CAJ8C;AAAA,MAI9DE,IAJ8D;;AAMrE,MAAMC,OAAO,GAAGJ,QAAQ,CAACK,GAAT,CAAa,UAACC,UAAD;AAAA,WAAgB,CAACA,UAAU,CAACT,QAAZ,EAAsBS,UAAU,CAACP,SAAjC,CAAhB;AAAA,GAAb,CAAhB;AAEA,SACE,MAAC,UAAD;AACE,IAAA,MAAM,EAAEG,QADV;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,KAAK,EAAE;AACLI,MAAAA,MAAM,EAAE;AADH,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,SAAD;AAAW,IAAA,GAAG,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQE,MAAC,OAAD;AAAS,IAAA,SAAS,EAAEH,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD,CApBD;;GAAMf,G;;KAAAA,G;AAsBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon } from 'react-leaflet';\n\nimport Location from '../../models/Location';\nimport {LatLngExpression} from \"leaflet\";\n\ntype MapProps = {\n  location: Location;\n  initialZoom?: number;\n};\n\nfunction mapPositionFromCoordinates(coordinates): LatLngExpression {\n  if (coordinates && coordinates.length) {\n    return { lat: coordinates[0].latitude, lng: coordinates[0].longitude };\n  }\n}\n\nconst Map = ({ location, initialZoom = 15 }: MapProps): JSX.Element => {\n  const coordinates = location?.coordinates;\n\n  const [position] = useState(mapPositionFromCoordinates(coordinates));\n  const [zoom] = useState(initialZoom);\n\n  const polygon = location.map((coordinate) => [coordinate.latitude, coordinate.longitude]);\n\n  return (\n    <MapLeaflet\n      center={position}\n      zoom={zoom}\n      style={{\n        height: '700px',\n      }}\n    >\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      <Polygon positions={polygon} />\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}