{"ast":null,"code":"var _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon } from 'react-leaflet';\nimport styles from './map.module.css';\n\nfunction mapPositionFromArea(area) {\n  if (area && area.length) {\n    return {\n      lat: area[0].latitude,\n      lng: area[0].longitude\n    };\n  }\n}\n\nconst Map = ({\n  location,\n  initialZoom = 15\n}) => {\n  const area = location === null || location === void 0 ? void 0 : location.area;\n  const {\n    0: position\n  } = useState(mapPositionFromCoordinates(area));\n  const {\n    0: zoom\n  } = useState(initialZoom);\n  return __jsx(MapLeaflet, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(TileLayer, {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), __jsx(Polygon, {\n    positions: coordinates.map(coordinate => [coordinate.latitude, coordinate.longitude]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","TileLayer","Polygon","styles","mapPositionFromArea","area","length","lat","latitude","lng","longitude","location","initialZoom","position","mapPositionFromCoordinates","zoom","container","coordinates","map","coordinate"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,QAAsD,eAAtD;AAKA,OAAOC,MAAP,MAAmB,kBAAnB;;AAOA,SAASC,mBAAT,CAA6BC,IAA7B,EAAqD;AACnD,MAAIA,IAAI,IAAIA,IAAI,CAACC,MAAjB,EAAyB;AACvB,WAAO;AAAEC,MAAAA,GAAG,EAAEF,IAAI,CAAC,CAAD,CAAJ,CAAQG,QAAf;AAAyBC,MAAAA,GAAG,EAAEJ,IAAI,CAAC,CAAD,CAAJ,CAAQK;AAAtC,KAAP;AACD;AACF;;AAED,MAAMX,GAAG,GAAG,CAAC;AAAEY,EAAAA,QAAF;AAAYC,EAAAA,WAAW,GAAG;AAA1B,CAAD,KAA2D;AACrE,QAAMP,IAAI,GAAGM,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEN,IAAvB;AAEA,QAAM;AAAA,OAACQ;AAAD,MAAaf,QAAQ,CAACgB,0BAA0B,CAACT,IAAD,CAA3B,CAA3B;AACA,QAAM;AAAA,OAACU;AAAD,MAASjB,QAAQ,CAACc,WAAD,CAAvB;AAEA,SACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAET,MAAM,CAACa,SAA9B;AAAyC,IAAA,MAAM,EAAEH,QAAjD;AAA2D,IAAA,IAAI,EAAEE,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,GAAG,EAAC,+FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAS,IAAA,SAAS,EAAEE,WAAW,CAACC,GAAZ,CAAiBC,UAAD,IAAgB,CAACA,UAAU,CAACX,QAAZ,EAAsBW,UAAU,CAACT,SAAjC,CAAhC,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAZD;;AAcA,eAAeX,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\n\ntype MapProps = {\n  location: Location;\n  initialZoom?: number;\n};\n\nfunction mapPositionFromArea(area): LatLngExpression {\n  if (area && area.length) {\n    return { lat: area[0].latitude, lng: area[0].longitude };\n  }\n}\n\nconst Map = ({ location, initialZoom = 15 }: MapProps): JSX.Element => {\n  const area = location?.area;\n\n  const [position] = useState(mapPositionFromCoordinates(area));\n  const [zoom] = useState(initialZoom);\n\n  return (\n    <MapLeaflet className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      <Polygon positions={coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude])} />\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}