{"ast":null,"code":"var _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Header, Icon, Container, Form, Select, Button, Label } from 'semantic-ui-react';\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport getMyLocations from '../locations/queries/getMyLocations';\nimport makePrediction from './queries/makePrediction';\nexport default function Predictions({\n  locations,\n  mushrooms\n}) {\n  const {\n    0: date,\n    1: setDate\n  } = useState();\n  const {\n    0: locationId,\n    1: setLocationId\n  } = useState();\n  const {\n    0: mushroomId,\n    1: setMushroomId\n  } = useState();\n  const {\n    0: prediction,\n    1: setPrediction\n  } = useState();\n\n  const handleOnSubmit = async () => {\n    var _response$data;\n\n    const response = await makePrediction({\n      date,\n      locationId,\n      mushroomId\n    });\n    setPrediction(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.probability);\n  };\n\n  function transformLocationsInOptions() {\n    return locations.map(location => ({\n      key: location.id,\n      value: location.id,\n      text: location.name\n    }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(mushroom => ({\n      key: mushroom.id,\n      value: mushroom.id,\n      text: mushroom.scientificName\n    }));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    as: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, {\n    name: \"map outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Predictions\")), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    style: {\n      padding: '0 100px'\n    },\n    onSubmit: handleOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Date\"), __jsx(\"input\", {\n    type: \"date\",\n    placeholder: \"Date\",\n    onChange: e => setDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Mushroom\"), __jsx(Select, {\n    placeholder: \"Mushroom\",\n    options: transformMushroomsInOptions(),\n    onChange: (_, data) => setMushroomId(data.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Location\"), __jsx(Select, {\n    placeholder: \"Location\",\n    options: transformLocationsInOptions(),\n    onChange: (_, data) => setLocationId(data.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Make prediction\")), __jsx(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, prediction)));\n}\nexport const getServerSideProps = async () => {\n  const resMushrooms = await getMushrooms(); // To-Do Share this query\n\n  const resLocations = await getMyLocations();\n  return {\n    props: {\n      mushrooms: resMushrooms.data,\n      locations: resLocations.data\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx"],"names":["React","useState","Header","Icon","Container","Form","Select","Button","Label","getMushrooms","getMyLocations","makePrediction","Predictions","locations","mushrooms","date","setDate","locationId","setLocationId","mushroomId","setMushroomId","prediction","setPrediction","handleOnSubmit","response","data","probability","transformLocationsInOptions","map","location","key","id","value","text","name","transformMushroomsInOptions","mushroom","scientificName","padding","e","target","_","getServerSideProps","resMushrooms","resLocations","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Header, Icon, Container, Form, Select, Button, Label } from 'semantic-ui-react';\nimport { GetServerSideProps } from 'next';\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport getMyLocations from '../locations/queries/getMyLocations';\nimport makePrediction from './queries/makePrediction';\n\ntype PredictionsProps = {\n  mushrooms: Array<{ id: string; scientificName: string }>;\n  locations: Array<{ id: string; name: string }>;\n};\n\nexport default function Predictions({ locations, mushrooms }: PredictionsProps): JSX.Element {\n  const [date, setDate] = useState();\n  const [locationId, setLocationId] = useState();\n  const [mushroomId, setMushroomId] = useState();\n  const [prediction, setPrediction] = useState();\n\n  const handleOnSubmit = async () => {\n    const response = await makePrediction({ date, locationId, mushroomId });\n\n    setPrediction(response?.data?.probability);\n  };\n\n  function transformLocationsInOptions() {\n    return locations.map((location) => ({ key: location.id, value: location.id, text: location.name }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">\n        <Icon name=\"map outline\" />\n        <Header.Content>Predictions</Header.Content>\n      </Header>\n      <Container>\n        <Form\n          style={{\n            padding: '0 100px',\n          }}\n          onSubmit={handleOnSubmit}\n        >\n          <Form.Field>\n            <label>Date</label>\n            <input type=\"date\" placeholder=\"Date\" onChange={(e): void => setDate(e.target.value)} />\n          </Form.Field>\n          <Form.Field>\n            <label>Mushroom</label>\n            <Select\n              placeholder=\"Mushroom\"\n              options={transformMushroomsInOptions()}\n              onChange={(_, data): void => setMushroomId(data.value)}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Location</label>\n            <Select\n              placeholder=\"Location\"\n              options={transformLocationsInOptions()}\n              onChange={(_, data): void => setLocationId(data.value)}\n            />\n          </Form.Field>\n          <Button type=\"submit\" primary>\n            Make prediction\n          </Button>\n        </Form>\n        <Label>{prediction}</Label>\n      </Container>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const resMushrooms = await getMushrooms();\n  // To-Do Share this query\n  const resLocations = await getMyLocations();\n\n  return { props: { mushrooms: resMushrooms.data, locations: resLocations.data } };\n};\n"]},"metadata":{},"sourceType":"module"}