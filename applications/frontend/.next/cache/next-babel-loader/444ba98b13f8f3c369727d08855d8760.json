{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/harvests/new.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Header, Icon, Form, Button, Select } from 'semantic-ui-react';\nimport { useRouter } from 'next/router';\nimport addHarvest from './queries/addHarvest';\nexport var __N_SSP = true;\nexport default function NewHarvest(_ref) {\n  _s();\n\n  var locationId = _ref.locationId,\n      mushrooms = _ref.mushrooms;\n\n  var _useState = useState(''),\n      date = _useState[0],\n      setDate = _useState[1];\n\n  var _useState2 = useState(''),\n      mushroomId = _useState2[0],\n      setMushroomId = _useState2[1];\n\n  var _useState3 = useState(''),\n      quantity = _useState3[0],\n      setQuantity = _useState3[1];\n\n  var router = useRouter();\n\n  var handleOnSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(form);\n              _context.next = 3;\n              return addHarvest({\n                date: date,\n                locationId: locationId,\n                mushroomId: mushroomId,\n                quantity: quantity\n              });\n\n            case 3:\n              router.push(\"/locations/\".concat(locationId));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleOnSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(function (mushroom) {\n      return {\n        key: mushroom.id,\n        value: mushroom.id,\n        text: mushroom.scientificName\n      };\n    });\n  }\n\n  function handleOnChange(_, data) {\n    setMushroomId(data);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    as: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, {\n    name: \"map outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"New Harvest\")), __jsx(Form, {\n    style: {\n      padding: '0 100px'\n    },\n    onSubmit: handleOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Date\"), __jsx(\"input\", {\n    type: \"date\",\n    placeholder: \"Date\",\n    onChange: function onChange(e) {\n      return setDate(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Mushroom\"), __jsx(Select, {\n    placeholder: \"Mushroom\",\n    options: transformMushroomsInOptions(),\n    onChange: handleOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Quantity\"), __jsx(\"input\", {\n    placeholder: \"quantity\",\n    onChange: function onChange(e) {\n      return setQuantity(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n}\n\n_s(NewHarvest, \"iFYKIdxZtxQJnKC5um8RX+IaDV4=\", false, function () {\n  return [useRouter];\n});\n\n_c = NewHarvest;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewHarvest\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/harvests/new.tsx"],"names":["React","useState","Header","Icon","Form","Button","Select","useRouter","addHarvest","NewHarvest","locationId","mushrooms","date","setDate","mushroomId","setMushroomId","quantity","setQuantity","router","handleOnSubmit","form","console","log","push","transformMushroomsInOptions","map","mushroom","key","id","value","text","scientificName","handleOnChange","_","data","padding","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Header, Icon, Form, Button, Select } from 'semantic-ui-react';\nimport { useRouter } from 'next/router';\n\nimport addHarvest from './queries/addHarvest';\nimport { GetServerSideProps } from 'next';\nimport getMushrooms from './queries/getMushrooms';\n\ntype NewHarvestProps = { locationId: string };\n\nexport default function NewHarvest({ locationId, mushrooms }: NewHarvestProps): JSX.Element {\n  const [date, setDate] = useState('');\n  const [mushroomId, setMushroomId] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const router = useRouter();\n\n  const handleOnSubmit = async (form) => {\n    console.log(form);\n    await addHarvest({ date, locationId, mushroomId, quantity });\n\n    router.push(`/locations/${locationId}`);\n  };\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  function handleOnChange(_, data) {\n    setMushroomId(data);\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">\n        <Icon name=\"map outline\" />\n        <Header.Content>New Harvest</Header.Content>\n      </Header>\n\n      <Form\n        style={{\n          padding: '0 100px',\n        }}\n        onSubmit={handleOnSubmit}\n      >\n        <Form.Field>\n          <label>Date</label>\n          <input type=\"date\" placeholder=\"Date\" onChange={(e): void => setDate(e.target.value)} />\n        </Form.Field>\n        <Form.Field>\n          <label>Mushroom</label>\n          <Select placeholder=\"Mushroom\" options={transformMushroomsInOptions()} onChange={handleOnChange} />\n        </Form.Field>\n        <Form.Field>\n          <label>Quantity</label>\n          <input placeholder=\"quantity\" onChange={(e): void => setQuantity(e.target.value)} />\n        </Form.Field>\n        <Button type=\"submit\" primary>\n          Save\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const res = await getMushrooms();\n\n  return { props: { mushrooms: res.data } };\n};\n"]},"metadata":{},"sourceType":"module"}