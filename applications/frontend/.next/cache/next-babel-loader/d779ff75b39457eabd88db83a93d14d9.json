{"ast":null,"code":"var _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/harvests/new.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Header, Icon, Form, Button, Select } from 'semantic-ui-react';\nimport { useRouter } from 'next/router';\nimport addHarvest from './queries/addHarvest';\nimport getMushrooms from './queries/getMushrooms';\nexport default function NewHarvest({\n  locationId,\n  mushrooms\n}) {\n  const {\n    0: date,\n    1: setDate\n  } = useState('');\n  const {\n    0: mushroomId,\n    1: setMushroomId\n  } = useState('');\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState('');\n  const router = useRouter();\n\n  const handleOnSubmit = async () => {\n    await addHarvest({\n      date,\n      locationId,\n      mushroomId,\n      quantity\n    });\n    router.push(`/locations/${locationId}`);\n  };\n\n  function transformMushroomsInOptions(mushrooms) {\n    return mushrooms.map(mushroom => ({\n      key: mushroom.id,\n      value: mushroom.id,\n      text: mushroom.scientificName\n    }));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    as: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, {\n    name: \"map outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), __jsx(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"New Harvest\")), __jsx(Form, {\n    style: {\n      padding: '0 100px'\n    },\n    onSubmit: handleOnSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Date\"), __jsx(\"input\", {\n    type: \"date\",\n    placeholder: \"Date\",\n    onChange: e => setDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Mushroom\"), __jsx(Select, {\n    placeholder: \"Mushroom\",\n    options: transformMushroomsInOptions(mushrooms),\n    onChange: e => setMushroomId(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Quantity\"), __jsx(\"input\", {\n    placeholder: \"quantity\",\n    onChange: e => setQuantity(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n}\nexport const getServerSideProps = async () => {\n  const res = await getMushrooms();\n  return {\n    props: {\n      mushrooms: res.data\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/harvests/new.tsx"],"names":["React","useState","Header","Icon","Form","Button","Select","useRouter","addHarvest","getMushrooms","NewHarvest","locationId","mushrooms","date","setDate","mushroomId","setMushroomId","quantity","setQuantity","router","handleOnSubmit","push","transformMushroomsInOptions","map","mushroom","key","id","value","text","scientificName","padding","e","target","getServerSideProps","res","props","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Header, Icon, Form, Button, Select } from 'semantic-ui-react';\nimport { useRouter } from 'next/router';\n\nimport addHarvest from './queries/addHarvest';\nimport { GetServerSideProps } from 'next';\nimport getMushrooms from './queries/getMushrooms';\n\ntype NewHarvestProps = { locationId: string };\n\nexport default function NewHarvest({ locationId, mushrooms }: NewHarvestProps): JSX.Element {\n  const [date, setDate] = useState('');\n  const [mushroomId, setMushroomId] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const router = useRouter();\n\n  const handleOnSubmit = async () => {\n    await addHarvest({ date, locationId, mushroomId, quantity });\n\n    router.push(`/locations/${locationId}`);\n  };\n\n  function transformMushroomsInOptions(mushrooms: any) {\n    return mushrooms.map((mushroom)=> ({key: mushroom.id, value: mushroom.id, text: mushroom.scientificName}));\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">\n        <Icon name=\"map outline\" />\n        <Header.Content>New Harvest</Header.Content>\n      </Header>\n\n      <Form\n        style={{\n          padding: '0 100px',\n        }}\n        onSubmit={handleOnSubmit}\n      >\n        <Form.Field>\n          <label>Date</label>\n          <input type=\"date\" placeholder=\"Date\" onChange={(e): void => setDate(e.target.value)} />\n        </Form.Field>\n        <Form.Field>\n          <label>Mushroom</label>\n          <Select\n            placeholder=\"Mushroom\"\n            options={transformMushroomsInOptions(mushrooms)}\n            onChange={(e): void => setMushroomId(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Quantity</label>\n          <input placeholder=\"quantity\" onChange={(e): void => setQuantity(e.target.value)} />\n        </Form.Field>\n        <Button type=\"submit\" primary>\n          Save\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const res = await getMushrooms();\n\n  return { props: { mushrooms: res.data } };\n};\n"]},"metadata":{},"sourceType":"module"}