{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.length) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nvar Map = function Map(_ref) {\n  _s();\n\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'view' : _ref$mode,\n      location = _ref.location,\n      _ref$initialZoom = _ref.initialZoom,\n      initialZoom = _ref$initialZoom === void 0 ? 15 : _ref$initialZoom,\n      _ref$onLocationCreate = _ref.onLocationCreated,\n      onLocationCreated = _ref$onLocationCreate === void 0 ? function () {} : _ref$onLocationCreate;\n  var initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n\n  var _useState = useState(initialPosition),\n      position = _useState[0];\n\n  var _useState2 = useState(initialZoom),\n      zoom = _useState2[0];\n\n  var renderEditionMode = function renderEditionMode(mode) {\n    if (mode !== 'edit') {\n      return null;\n    }\n\n    var handleOnCreate = function handleOnCreate(event) {\n      var _event$layer, _event$layer$editing;\n\n      if ((_event$layer = event.layer) === null || _event$layer === void 0 ? void 0 : (_event$layer$editing = _event$layer.editing) === null || _event$layer$editing === void 0 ? void 0 : _event$layer$editing.latlngs[0][0]) {\n        var _event$layer2, _event$layer2$editing;\n\n        var coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n        onLocationCreated(coordinates.map(function (coordinate) {\n          return {\n            latitude: coordinate.lat,\n            longitude: coordinate.lng\n          };\n        }));\n      }\n    };\n\n    return __jsx(FeatureGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, __jsx(EditControl, {\n      position: \"topright\",\n      draw: {\n        rectangle: false,\n        circle: false,\n        marker: false,\n        circlemarker: false,\n        polyline: false\n      },\n      onCreated: handleOnCreate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var renderLocation = function renderLocation(location) {\n    if (!location) {\n      return null;\n    }\n\n    var zone = location === null || location === void 0 ? void 0 : location.zone;\n    return __jsx(Polygon, {\n      positions: zone.map(function (coordinate) {\n        return [coordinate.latitude, coordinate.longitude];\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }\n    });\n  };\n\n  return __jsx(MapLeaflet, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(TileLayer, {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), renderEditionMode(mode), renderLocation(location));\n};\n\n_s(Map, \"BIeMiJgf2j1JF+FQEi04qt0NgfI=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","TileLayer","Polygon","FeatureGroup","EditControl","styles","mapPositionFromZone","zone","length","lat","midpoint","latitude","lng","longitude","mode","location","initialZoom","onLocationCreated","initialPosition","position","zoom","renderEditionMode","handleOnCreate","event","layer","editing","latlngs","coordinates","map","coordinate","rectangle","circle","marker","circlemarker","polyline","renderLocation","container"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nfunction mapPositionFromZone(zone): LatLngExpression {\n  if (zone && zone.length) {\n    return { lat: zone.midpoint.latitude, lng: zone.midpoint.longitude };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = (): void => {},\n}: MapProps): JSX.Element => {\n  const initialPosition = mapPositionFromZone(location?.zone) || { lat: 42.829022, lng: -4.849545 };\n\n  const [position] = useState(initialPosition);\n  const [zoom] = useState(initialZoom);\n\n  const renderEditionMode = (mode): JSX.Element => {\n    if (mode !== 'edit') {\n      return null;\n    }\n    const handleOnCreate = (event): void => {\n      if (event.layer?.editing?.latlngs[0][0]) {\n        const coordinates = event.layer?.editing?.latlngs[0][0];\n\n        onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n      }\n    };\n\n    return (\n      <FeatureGroup>\n        <EditControl\n          position=\"topright\"\n          draw={{\n            rectangle: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n            polyline: false,\n          }}\n          onCreated={handleOnCreate}\n        />\n      </FeatureGroup>\n    );\n  };\n\n  const renderLocation = (location): JSX.Element => {\n    if (!location) {\n      return null;\n    }\n\n    const zone = location?.zone;\n\n    return <Polygon positions={zone.map((coordinate) => [coordinate.latitude, coordinate.longitude])} />;\n  };\n\n  return (\n    <MapLeaflet className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      {renderEditionMode(mode)}\n      {renderLocation(location)}\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}