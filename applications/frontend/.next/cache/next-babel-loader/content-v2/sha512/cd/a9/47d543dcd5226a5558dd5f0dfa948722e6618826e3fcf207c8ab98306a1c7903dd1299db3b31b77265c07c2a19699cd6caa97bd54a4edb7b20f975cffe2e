{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\";\nimport React, { useState } from 'react';\nimport { MapContainer, WMSTileLayer, TileLayer, Polygon, FeatureGroup, useMap } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.midpoint) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = () => {}\n}) => {\n  const initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n  const {\n    0: position\n  } = useState(initialPosition);\n  const {\n    0: zoom\n  } = useState(initialZoom);\n  const {\n    0: hasLocationDefined,\n    1: setHasLocationDefined\n  } = useState(mode === 'view');\n\n  const renderEditionMode = mode => {\n    if (mode !== 'edit') {\n      return null;\n    }\n\n    const handleOnCreate = event => {\n      var _event$layer, _event$layer$editing;\n\n      if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n        var _event$layer2, _event$layer2$editing;\n\n        const coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n        setHasLocationDefined(true);\n        onLocationCreated(coordinates.map(coordinate => ({\n          latitude: coordinate.lat,\n          longitude: coordinate.lng\n        })));\n      }\n    };\n\n    const handleOnDelete = event => {\n      var _event$layers;\n\n      if (((_event$layers = event.layers) === null || _event$layers === void 0 ? void 0 : _event$layers.getLayers().length) > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n      children: /*#__PURE__*/_jsxDEV(EditControl, {\n        position: \"topright\",\n        draw: {\n          rectangle: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polyline: false,\n          polygon: hasLocationDefined ? false : {\n            allowIntersection: false,\n            drawError: {\n              color: '#e1e100',\n              message: 'Oops! you cannot draw in that way.'\n            },\n            shapeOptions: {\n              color: '#b5cc18'\n            }\n          }\n        },\n        onCreated: handleOnCreate,\n        onDeleted: handleOnDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WMSTileLayer, {\n      url: \"https://www.ign.es/wms-inspire/ign-base\",\n      format: \"image/png\",\n      layers: \"IGNBaseOrto\",\n      transparent: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), renderEditionMode(mode), /*#__PURE__*/_jsxDEV(Area, {\n      location: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\nconst Area = ({\n  location\n}) => {\n  const map = useMap();\n\n  if (!location) {\n    return null;\n  }\n\n  const zone = location === null || location === void 0 ? void 0 : location.zone;\n  const positions = zone.coordinates.map(coordinate => [coordinate.latitude, coordinate.longitude]);\n  map.fitBounds(positions);\n  return /*#__PURE__*/_jsxDEV(Polygon, {\n    positions: positions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","MapContainer","WMSTileLayer","TileLayer","Polygon","FeatureGroup","useMap","EditControl","styles","mapPositionFromZone","zone","midpoint","lat","latitude","lng","longitude","Map","mode","location","initialZoom","onLocationCreated","initialPosition","position","zoom","hasLocationDefined","setHasLocationDefined","renderEditionMode","handleOnCreate","event","layer","editing","latlngs","coordinates","map","coordinate","handleOnDelete","layers","getLayers","length","rectangle","circle","marker","circlemarker","polyline","polygon","allowIntersection","drawError","color","message","shapeOptions","container","Area","positions","fitBounds"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { MapContainer, WMSTileLayer, TileLayer, Polygon, FeatureGroup, useMap } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nfunction mapPositionFromZone(zone): LatLngExpression {\n  if (zone && zone.midpoint) {\n    return { lat: zone.midpoint.latitude, lng: zone.midpoint.longitude };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = (): void => {},\n}: MapProps): JSX.Element => {\n  const initialPosition = mapPositionFromZone(location?.zone) || { lat: 42.829022, lng: -4.849545 };\n\n  const [position] = useState(initialPosition);\n  const [zoom] = useState(initialZoom);\n  const [hasLocationDefined, setHasLocationDefined] = useState(mode === 'view');\n\n  const renderEditionMode = (mode): JSX.Element => {\n    if (mode !== 'edit') {\n      return null;\n    }\n    const handleOnCreate = (event): void => {\n      if (event.layer?.editing?.latlngs[0][0]) {\n        const coordinates = event.layer?.editing?.latlngs[0][0];\n\n        setHasLocationDefined(true);\n\n        onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n      }\n    };\n\n    const handleOnDelete = (event): void => {\n      if (event.layers?.getLayers().length > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return (\n      <FeatureGroup>\n        <EditControl\n          position=\"topright\"\n          draw={{\n            rectangle: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n            polyline: false,\n            polygon: hasLocationDefined\n              ? false\n              : {\n                  allowIntersection: false,\n                  drawError: {\n                    color: '#e1e100',\n                    message: 'Oops! you cannot draw in that way.',\n                  },\n                  shapeOptions: {\n                    color: '#b5cc18',\n                  },\n                },\n          }}\n          onCreated={handleOnCreate}\n          onDeleted={handleOnDelete}\n        />\n      </FeatureGroup>\n    );\n  };\n  \n\n  return (\n    <MapContainer className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      <WMSTileLayer url=\"https://www.ign.es/wms-inspire/ign-base\" format=\"image/png\" layers=\"IGNBaseOrto\" transparent />\n      {renderEditionMode(mode)}\n      <Area location={location} />\n    </MapContainer>\n  );\n};\n\nconst Area = ({ location }): JSX.Element => {\n  const map = useMap();\n\n  if (!location) {\n    return null;\n  }\n\n  const zone = location?.zone;\n  const positions = zone.coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude]);\n  map.fitBounds(positions);\n\n  return <Polygon positions={positions} />;\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}