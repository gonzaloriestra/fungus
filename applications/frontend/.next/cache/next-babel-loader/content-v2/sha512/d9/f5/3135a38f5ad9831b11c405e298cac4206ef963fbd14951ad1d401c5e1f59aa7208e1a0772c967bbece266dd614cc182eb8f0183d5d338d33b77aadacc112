{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx\";\nimport React, { useState } from 'react';\nimport { Button, Container, Form, Select, Header as SemanticHeader, Dimmer, Icon } from 'semantic-ui-react';\nimport useSWR from 'swr';\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport fetcher from '../../fetching/fetcher';\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport makePrediction from './queries/makePrediction';\nimport Header, { ActivePage } from '../../components/Header';\nimport { useRouter } from 'next/router';\nconst square = {\n  width: 175,\n  height: 175\n};\nexport default function Predictions({\n  mushrooms\n}) {\n  const router = useRouter();\n  const {\n    0: date,\n    1: setDate\n  } = useState();\n  const {\n    0: locationId,\n    1: setLocationId\n  } = useState(router.query.locationId);\n  const {\n    0: mushroomId,\n    1: setMushroomId\n  } = useState();\n  const {\n    0: prediction,\n    1: setPrediction\n  } = useState();\n  const {\n    0: active,\n    1: setActive\n  } = useState();\n\n  const handleOnSubmit = async () => {\n    var _response$data;\n\n    const response = await makePrediction({\n      date,\n      locationId,\n      mushroomId\n    });\n    setPrediction(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.probability);\n    setActive(true);\n  };\n\n  const handleClose = () => setActive(false);\n\n  const handleOnChangeLocation = (_, data) => {\n    setLocationId(data.value);\n    router.push(`predictions/?locationId=${data.value}`, undefined, {\n      shallow: true\n    });\n  };\n\n  function transformLocationsInOptions() {\n    const result = useSWR(`/api/me/locations`, fetcher);\n    const locations = result.data; // const error: Error = result.error;\n    // if (error) {\n    //   return <div>Loading failed: {error.message}</div>;\n    // }\n    // if (!locations) {\n    //   return <div>Loading...</div>;\n    // }\n\n    return locations === null || locations === void 0 ? void 0 : locations.map(location => ({\n      key: location.id,\n      value: location.id,\n      text: location.name\n    }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(mushroom => ({\n      key: mushroom.id,\n      value: mushroom.id,\n      text: mushroom.scientificName\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      activePage: ActivePage.predictions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleOnSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\xBFCu\\xE1ndo?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            onChange: e => setDate(e.target.value),\n            placeholder: \"Introduce fecha\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\xBFQu\\xE9 seta?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Seleciona especie\",\n            options: transformMushroomsInOptions(),\n            onChange: (_, data) => setMushroomId(data.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\xBFPara qu\\xE9 localizaci\\xF3n?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Seleciona localizaci\\xF3n\",\n            options: transformLocationsInOptions(),\n            onChange: handleOnChangeLocation,\n            value: locationId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          circular: true,\n          type: \"submit\",\n          primary: true,\n          style: square,\n          children: /*#__PURE__*/_jsxDEV(SemanticHeader, {\n            as: \"h2\",\n            inverted: true,\n            children: \"Mostrar predicci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dimmer, {\n        active: active,\n        onClickOutside: handleClose,\n        page: true,\n        children: /*#__PURE__*/_jsxDEV(SemanticHeader, {\n          as: \"h2\",\n          icon: true,\n          inverted: true,\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"heart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SemanticHeader.Subheader, {\n            children: prediction\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getServerSideProps = withServerAuthRequired(async () => {\n  const resMushrooms = await getMushrooms();\n  return {\n    props: {\n      mushrooms: resMushrooms.data\n    }\n  };\n});","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx"],"names":["React","useState","Button","Container","Form","Select","Header","SemanticHeader","Dimmer","Icon","useSWR","withServerAuthRequired","fetcher","getMushrooms","makePrediction","ActivePage","useRouter","square","width","height","Predictions","mushrooms","router","date","setDate","locationId","setLocationId","query","mushroomId","setMushroomId","prediction","setPrediction","active","setActive","handleOnSubmit","response","data","probability","handleClose","handleOnChangeLocation","_","value","push","undefined","shallow","transformLocationsInOptions","result","locations","map","location","key","id","text","name","transformMushroomsInOptions","mushroom","scientificName","predictions","e","target","getServerSideProps","resMushrooms","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Container, Form, Label, Select, Header as SemanticHeader, Dimmer, Icon } from 'semantic-ui-react';\nimport { GetServerSideProps } from 'next';\nimport useSWR from 'swr';\n\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport fetcher from '../../fetching/fetcher';\n\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport makePrediction from './queries/makePrediction';\nimport Location from '../locations/models/Location';\nimport Header, { ActivePage } from '../../components/Header';\nimport { useRouter } from 'next/router';\n\ntype PredictionsProps = {\n  mushrooms: Array<{ id: string; scientificName: string }>;\n  locations: Array<{ id: string; name: string }>;\n};\n\nconst square = { width: 175, height: 175 };\n\nexport default function Predictions({ mushrooms }: PredictionsProps): JSX.Element {\n  const router = useRouter();\n\n  const [date, setDate] = useState();\n  const [locationId, setLocationId] = useState(router.query.locationId);\n  const [mushroomId, setMushroomId] = useState();\n  const [prediction, setPrediction] = useState();\n  const [active, setActive] = useState();\n\n  const handleOnSubmit = async () => {\n    const response = await makePrediction({ date, locationId, mushroomId });\n\n    setPrediction(response?.data?.probability);\n\n    setActive(true);\n  };\n\n  const handleClose = () => setActive(false);\n\n  const handleOnChangeLocation = (_, data) => {\n    setLocationId(data.value);\n\n    router.push(`predictions/?locationId=${data.value}`, undefined, { shallow: true });\n  };\n\n  function transformLocationsInOptions() {\n    const result = useSWR(`/api/me/locations`, fetcher);\n    const locations: Array<Location> = result.data;\n    // const error: Error = result.error;\n\n    // if (error) {\n    //   return <div>Loading failed: {error.message}</div>;\n    // }\n\n    // if (!locations) {\n    //   return <div>Loading...</div>;\n    // }\n\n    return locations?.map((location) => ({ key: location.id, value: location.id, text: location.name }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  return (\n    <>\n      <Header activePage={ActivePage.predictions} />\n      <Container>\n        <Form onSubmit={handleOnSubmit}>\n          <Form.Field>\n            <label>¿Cuándo?</label>\n            <input type=\"date\" onChange={(e): void => setDate(e.target.value)} placeholder=\"Introduce fecha\" />\n          </Form.Field>\n          <Form.Field>\n            <label>¿Qué seta?</label>\n            <Select\n              placeholder=\"Seleciona especie\"\n              options={transformMushroomsInOptions()}\n              onChange={(_, data): void => setMushroomId(data.value)}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>¿Para qué localización?</label>\n            <Select\n              placeholder=\"Seleciona localización\"\n              options={transformLocationsInOptions()}\n              onChange={handleOnChangeLocation}\n              value={locationId}\n            />\n          </Form.Field>\n          <Button circular type=\"submit\" primary style={square}>\n            <SemanticHeader as=\"h2\" inverted>\n              Mostrar predicción\n            </SemanticHeader>\n          </Button>\n        </Form>\n        <Dimmer active={active} onClickOutside={handleClose} page>\n          <SemanticHeader as=\"h2\" icon inverted>\n            <Icon name=\"heart\" />\n            <SemanticHeader.Subheader>{prediction}</SemanticHeader.Subheader>\n          </SemanticHeader>\n        </Dimmer>\n      </Container>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = withServerAuthRequired(async () => {\n  const resMushrooms = await getMushrooms();\n\n  return { props: { mushrooms: resMushrooms.data } };\n});\n"]},"metadata":{},"sourceType":"module"}