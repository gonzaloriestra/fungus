{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Map as MapContainer, WMSTileLayer, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.midpoint) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nvar Map = function Map(_ref) {\n  _s();\n\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'view' : _ref$mode,\n      location = _ref.location,\n      _ref$initialZoom = _ref.initialZoom,\n      initialZoom = _ref$initialZoom === void 0 ? 15 : _ref$initialZoom,\n      _ref$onLocationCreate = _ref.onLocationCreated,\n      onLocationCreated = _ref$onLocationCreate === void 0 ? function () {} : _ref$onLocationCreate;\n  var initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n\n  var _useState = useState(initialPosition),\n      position = _useState[0];\n\n  var _useState2 = useState(initialZoom),\n      zoom = _useState2[0];\n\n  var _useState3 = useState(mode === 'view'),\n      hasLocationDefined = _useState3[0],\n      setHasLocationDefined = _useState3[1];\n\n  var EditionControls = function EditionControls(_ref2) {\n    var mode = _ref2.mode;\n\n    if (mode !== 'edit') {\n      return null;\n    }\n\n    var handleOnCreate = function handleOnCreate(event) {\n      var _event$layer, _event$layer$editing;\n\n      if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n        var _event$layer2, _event$layer2$editing;\n\n        var coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n        setHasLocationDefined(true);\n        onLocationCreated(coordinates.map(function (coordinate) {\n          return {\n            latitude: coordinate.lat,\n            longitude: coordinate.lng\n          };\n        }));\n      }\n    };\n\n    var handleOnDelete = function handleOnDelete(event) {\n      var _event$layers;\n\n      if (((_event$layers = event.layers) === null || _event$layers === void 0 ? void 0 : _event$layers.getLayers().length) > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n      children: /*#__PURE__*/_jsxDEV(EditControl, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(WMSTileLayer, {\n      url: \"https://www.ign.es/wms-inspire/ign-base\",\n      format: \"image/png\",\n      layers: \"IGNBaseOrto\",\n      transparent: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(EditionControls, {\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Area, {\n      location: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"uoF2iXObiwCC3Of5PHtnkuC3rFw=\");\n\n_c = Map;\n\nvar Area = function Area(_ref3) {\n  var location = _ref3.location;\n\n  // const map = useMap();\n  if (!location) {\n    return null;\n  }\n\n  var zone = location === null || location === void 0 ? void 0 : location.zone;\n  var positions = zone.coordinates.map(function (coordinate) {\n    return [coordinate.latitude, coordinate.longitude];\n  }); // map.fitBounds(positions);\n\n  return /*#__PURE__*/_jsxDEV(Polygon, {\n    positions: positions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 10\n  }, _this);\n};\n\n_c2 = Area;\nexport default Map;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"Area\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapContainer","WMSTileLayer","TileLayer","Polygon","FeatureGroup","EditControl","styles","mapPositionFromZone","zone","midpoint","lat","latitude","lng","longitude","mode","location","initialZoom","onLocationCreated","initialPosition","position","zoom","hasLocationDefined","setHasLocationDefined","EditionControls","handleOnCreate","event","layer","editing","latlngs","coordinates","map","coordinate","handleOnDelete","layers","getLayers","length","container","Area","positions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapContainer, WMSTileLayer, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nfunction mapPositionFromZone(zone): LatLngExpression {\n  if (zone && zone.midpoint) {\n    return { lat: zone.midpoint.latitude, lng: zone.midpoint.longitude };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = (): void => {},\n}: MapProps): JSX.Element => {\n  const initialPosition = mapPositionFromZone(location?.zone) || { lat: 42.829022, lng: -4.849545 };\n\n  const [position] = useState(initialPosition);\n  const [zoom] = useState(initialZoom);\n  const [hasLocationDefined, setHasLocationDefined] = useState(mode === 'view');\n\n  const EditionControls = ({ mode }): JSX.Element => {\n    if (mode !== 'edit') {\n      return null;\n    }\n    const handleOnCreate = (event): void => {\n      if (event.layer?.editing?.latlngs[0][0]) {\n        const coordinates = event.layer?.editing?.latlngs[0][0];\n\n        setHasLocationDefined(true);\n\n        onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n      }\n    };\n\n    const handleOnDelete = (event): void => {\n      if (event.layers?.getLayers().length > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return (\n      <FeatureGroup>\n        <EditControl />\n        {/*<EditControl*/}\n        {/*  position=\"topright\"*/}\n        {/*  draw={{*/}\n        {/*    rectangle: false,*/}\n        {/*    circle: false,*/}\n        {/*    marker: false,*/}\n        {/*    circlemarker: false,*/}\n        {/*    polyline: false,*/}\n        {/*    polygon: hasLocationDefined*/}\n        {/*      ? false*/}\n        {/*      : {*/}\n        {/*          allowIntersection: false,*/}\n        {/*          drawError: {*/}\n        {/*            color: '#e1e100',*/}\n        {/*            message: 'Oops! you cannot draw in that way.',*/}\n        {/*          },*/}\n        {/*          shapeOptions: {*/}\n        {/*            color: '#b5cc18',*/}\n        {/*          },*/}\n        {/*        },*/}\n        {/*  }}*/}\n        {/*  onCreated={handleOnCreate}*/}\n        {/*  onDeleted={handleOnDelete}*/}\n        {/*/>*/}\n      </FeatureGroup>\n    );\n  };\n\n  return (\n    <MapContainer className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      <WMSTileLayer url=\"https://www.ign.es/wms-inspire/ign-base\" format=\"image/png\" layers=\"IGNBaseOrto\" transparent />\n      <EditionControls mode={mode} />\n      <Area location={location} />\n    </MapContainer>\n  );\n};\n\nconst Area = ({ location }): JSX.Element => {\n  // const map = useMap();\n\n  if (!location) {\n    return null;\n  }\n\n  const zone = location?.zone;\n  const positions = zone.coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude]);\n  // map.fitBounds(positions);\n\n  return <Polygon positions={positions} />;\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}