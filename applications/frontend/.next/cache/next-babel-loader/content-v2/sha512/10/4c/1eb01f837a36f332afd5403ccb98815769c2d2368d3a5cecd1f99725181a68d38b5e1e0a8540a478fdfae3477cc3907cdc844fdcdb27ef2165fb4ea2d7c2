{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/[id].tsx\";\nimport React from 'react';\nimport { Button, Header as SemanticHeader, Icon } from 'semantic-ui-react';\nimport { withClientAuthRequired } from '../../authentication/withAuthRequired';\nimport useMyLocation from '../../queries/getLocation';\nimport Map from '../../components/Map';\nimport Link from 'next/link';\nimport Header, { ActivePage } from '../../components/Header';\nimport { useRouter } from 'next/router';\n\nfunction LocationDetails() {\n  const router = useRouter();\n  const {\n    location,\n    isLoading,\n    error\n  } = useMyLocation({\n    id: '1b340a08-78f4-42b3-8f85-fe735c702065'\n  });\n\n  if (error) {\n    // To-Do Implement error behaviour\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Loading failed: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!isLoading) {\n    // To-Do implement loading spinner\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      activePage: ActivePage.locations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '500px',\n        padding: '0 100px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        location: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SemanticHeader, {\n      as: \"h2\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"calendar alternate outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SemanticHeader.Content, {\n        children: \"Harvests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: `/harvests/new?locationId=${location.id}`,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        primary: true,\n        children: \"Add Harvest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default withClientAuthRequired(LocationDetails); // export const getServerSideProps: GetServerSideProps = withServerAuthRequired(async ({ params }) => {\n//   const resLocation = await getLocation({ id: params.id });\n//\n//   let harvests;\n//   try {\n//     const resHarvests = await getHarvestsByLocationId({ locationId: params.id });\n//     harvests = resHarvests?.data;\n//   } catch (error) {\n//     harvests = [];\n//   }\n//\n//   // To-Do: Controls errors\n//   return { props: { location: resLocation.data, harvests } };\n// });","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/[id].tsx"],"names":["React","Button","Header","SemanticHeader","Icon","withClientAuthRequired","useMyLocation","Map","Link","ActivePage","useRouter","LocationDetails","router","location","isLoading","error","id","message","locations","height","padding"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAoCC,MAAM,IAAIC,cAA9C,EAA8DC,IAA9D,QAA0E,mBAA1E;AAEA,SAASC,sBAAT,QAAuC,uCAAvC;AAGA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAGA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAON,MAAP,IAAiBO,UAAjB,QAAmC,yBAAnC;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAQA,SAASC,eAAT,GAAwC;AACtC,QAAMC,MAAM,GAAGF,SAAS,EAAxB;AAEA,QAAM;AAAEG,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAiCT,aAAa,CAAC;AAAEU,IAAAA,EAAE,EAAE;AAAN,GAAD,CAApD;;AAEA,MAAID,KAAJ,EAAW;AACT;AACA,wBAAO;AAAA,qCAAsBA,KAAK,CAACE,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAI,CAACH,SAAL,EAAgB;AACd;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,UAAU,EAAEL,UAAU,CAACS;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE,OADH;AAELC,QAAAA,OAAO,EAAE;AAFJ,OADT;AAAA,6BAME,QAAC,GAAD;AAAK,QAAA,QAAQ,EAAEP;AAAf;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE,QAAC,cAAD;AAAgB,MAAA,EAAE,EAAC,IAAnB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD,CAAgB,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAeE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAG,4BAA2BA,QAAQ,CAACG,EAAG,EAApD;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA,kBADF;AAqBD;;AAED,eAAeX,sBAAsB,CAACM,eAAD,CAArC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Button, DropdownItemProps, Header as SemanticHeader, Icon } from 'semantic-ui-react';\n\nimport { withClientAuthRequired } from '../../authentication/withAuthRequired';\n\nimport Location from '../../models/Location';\nimport useMyLocation from '../../queries/getLocation';\nimport Map from '../../components/Map';\nimport HarvestList from '../../components/HarvestList';\nimport getHarvestsByLocationId from '../../queries/getHarvestsByLocationId';\nimport Link from 'next/link';\nimport Header, { ActivePage } from '../../components/Header';\nimport { useRouter } from 'next/router';\n\ntype LocationDetailsProps = {\n  location: Location;\n  // To-Do make a right model for harvests\n  harvests: object;\n};\n\nfunction LocationDetails(): JSX.Element {\n  const router = useRouter();\n\n  const { location, isLoading, error } = useMyLocation({ id: '1b340a08-78f4-42b3-8f85-fe735c702065' });\n\n  if (error) {\n    // To-Do Implement error behaviour\n    return <div>Loading failed: {error.message}</div>;\n  }\n\n  if (!isLoading) {\n    // To-Do implement loading spinner\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <Header activePage={ActivePage.locations} />\n      <div\n        style={{\n          height: '500px',\n          padding: '0 100px',\n        }}\n      >\n        <Map location={location} />\n      </div>\n      <SemanticHeader as=\"h2\">\n        <Icon name=\"calendar alternate outline\" />\n        <SemanticHeader.Content>Harvests</SemanticHeader.Content>\n      </SemanticHeader>\n      {/*<HarvestList harvests={harvests} />*/}\n      <Link href={`/harvests/new?locationId=${location.id}`}>\n        <Button primary>Add Harvest</Button>\n      </Link>\n    </>\n  );\n}\n\nexport default withClientAuthRequired(LocationDetails);\n\n// export const getServerSideProps: GetServerSideProps = withServerAuthRequired(async ({ params }) => {\n//   const resLocation = await getLocation({ id: params.id });\n//\n//   let harvests;\n//   try {\n//     const resHarvests = await getHarvestsByLocationId({ locationId: params.id });\n//     harvests = resHarvests?.data;\n//   } catch (error) {\n//     harvests = [];\n//   }\n//\n//   // To-Do: Controls errors\n//   return { props: { location: resLocation.data, harvests } };\n// });\n"]},"metadata":{},"sourceType":"module"}