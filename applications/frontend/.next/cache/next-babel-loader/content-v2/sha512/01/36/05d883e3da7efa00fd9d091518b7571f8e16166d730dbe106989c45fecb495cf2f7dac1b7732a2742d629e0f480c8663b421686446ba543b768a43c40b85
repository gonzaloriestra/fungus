{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/harvests/new.tsx\";\nimport React, { useState } from 'react';\nimport { Header, Icon, Form, Button, Select } from 'semantic-ui-react';\nimport { useRouter } from 'next/router';\nimport { withClientAuthRequired } from '../../authentication/withAuthRequired';\nimport addHarvest from '../../fetching/harvests/add';\nimport useMushrooms from '../../fetching/useMushrooms';\n\nfunction NewHarvest() {\n  const {\n    mushrooms,\n    isLoading,\n    error\n  } = useMushrooms();\n  const {\n    0: date,\n    1: setDate\n  } = useState('');\n  const {\n    0: mushroomId,\n    1: setMushroomId\n  } = useState('');\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState('');\n  const router = useRouter();\n\n  const handleOnSubmit = async () => {\n    const locationId = router.query.locationId;\n    await addHarvest({\n      date,\n      locationId,\n      mushroomId,\n      quantity\n    });\n    router.push(`/locations/${locationId}`);\n  };\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(mushroom => ({\n      key: mushroom.id,\n      value: mushroom.id,\n      text: mushroom.scientificName\n    }));\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Loading failed: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"map outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header.Content, {\n        children: \"New Harvest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        padding: '0 100px'\n      },\n      onSubmit: handleOnSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          placeholder: \"Date\",\n          onChange: e => setDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Mushroom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"Mushroom\",\n          options: transformMushroomsInOptions() // @ts-ignore\n          ,\n          onChange: (_, data) => setMushroomId(data.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"quantity\",\n          onChange: e => setQuantity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        primary: true,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default withClientAuthRequired(NewHarvest);","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/harvests/new.tsx"],"names":["React","useState","Header","Icon","Form","Button","Select","useRouter","withClientAuthRequired","addHarvest","useMushrooms","NewHarvest","mushrooms","isLoading","error","date","setDate","mushroomId","setMushroomId","quantity","setQuantity","router","handleOnSubmit","locationId","query","push","transformMushroomsInOptions","map","mushroom","key","id","value","text","scientificName","message","padding","e","target","_","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,MAArC,QAAmD,mBAAnD;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,sBAAT,QAAuC,uCAAvC;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,OAAOC,YAAP,MAAyB,6BAAzB;;AAIA,SAASC,UAAT,GAAmC;AACjC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAkCJ,YAAY,EAApD;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACgB,UAAD;AAAA,OAAaC;AAAb,MAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACkB,QAAD;AAAA,OAAWC;AAAX,MAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMoB,MAAM,GAAGd,SAAS,EAAxB;;AAEA,QAAMe,cAAc,GAAG,YAAY;AACjC,UAAMC,UAAU,GAAGF,MAAM,CAACG,KAAP,CAAaD,UAAhC;AAEA,UAAMd,UAAU,CAAC;AAAEM,MAAAA,IAAF;AAAQQ,MAAAA,UAAR;AAAoBN,MAAAA,UAApB;AAAgCE,MAAAA;AAAhC,KAAD,CAAhB;AAEAE,IAAAA,MAAM,CAACI,IAAP,CAAa,cAAaF,UAAW,EAArC;AACD,GAND;;AAQA,WAASG,2BAAT,GAAuC;AACrC,WAAOd,SAAS,CAACe,GAAV,CAAeC,QAAD,KAAe;AAAEC,MAAAA,GAAG,EAAED,QAAQ,CAACE,EAAhB;AAAoBC,MAAAA,KAAK,EAAEH,QAAQ,CAACE,EAApC;AAAwCE,MAAAA,IAAI,EAAEJ,QAAQ,CAACK;AAAvD,KAAf,CAAd,CAAP;AACD;;AAED,MAAInB,KAAJ,EAAW;AACT,wBAAO;AAAA,qCAAsBA,KAAK,CAACoB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIrB,SAAJ,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLsB,QAAAA,OAAO,EAAE;AADJ,OADT;AAIE,MAAA,QAAQ,EAAEb,cAJZ;AAAA,8BAME,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,WAAW,EAAC,MAA/B;AAAsC,UAAA,QAAQ,EAAGc,CAAD,IAAapB,OAAO,CAACoB,CAAC,CAACC,MAAF,CAASN,KAAV;AAApE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAUE,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AACE,UAAA,WAAW,EAAC,UADd;AAEE,UAAA,OAAO,EAAEL,2BAA2B,EAFtC,CAGE;AAHF;AAIE,UAAA,QAAQ,EAAE,CAACY,CAAD,EAAIC,IAAJ,KAAsCrB,aAAa,CAACqB,IAAI,CAACR,KAAN;AAJ/D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAmBE,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,WAAW,EAAC,UAAnB;AAA8B,UAAA,QAAQ,EAAGK,CAAD,IAAahB,WAAW,CAACgB,CAAC,CAACC,MAAF,CAASN,KAAV;AAAhE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAuBE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAoCD;;AAED,eAAevB,sBAAsB,CAACG,UAAD,CAArC","sourcesContent":["import React, { useState } from 'react';\nimport { Header, Icon, Form, Button, Select } from 'semantic-ui-react';\nimport { useRouter } from 'next/router';\n\nimport { withClientAuthRequired } from '../../authentication/withAuthRequired';\n\nimport addHarvest from '../../fetching/harvests/add';\nimport getMushrooms from '../../fetching/getMushrooms';\nimport useMushrooms from '../../fetching/useMushrooms';\n\ntype NewHarvestProps = { mushrooms: Array<{ id: string; scientificName: string }> };\n\nfunction NewHarvest(): JSX.Element {\n  const { mushrooms, isLoading, error } = useMushrooms();\n  const [date, setDate] = useState('');\n  const [mushroomId, setMushroomId] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const router = useRouter();\n\n  const handleOnSubmit = async () => {\n    const locationId = router.query.locationId;\n\n    await addHarvest({ date, locationId, mushroomId, quantity });\n\n    router.push(`/locations/${locationId}`);\n  };\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  if (error) {\n    return <div>Loading failed: {error.message}</div>;\n  }\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">\n        <Icon name=\"map outline\" />\n        <Header.Content>New Harvest</Header.Content>\n      </Header>\n\n      <Form\n        style={{\n          padding: '0 100px',\n        }}\n        onSubmit={handleOnSubmit}\n      >\n        <Form.Field>\n          <label>Date</label>\n          <input type=\"date\" placeholder=\"Date\" onChange={(e): void => setDate(e.target.value)} />\n        </Form.Field>\n        <Form.Field>\n          <label>Mushroom</label>\n          <Select\n            placeholder=\"Mushroom\"\n            options={transformMushroomsInOptions()}\n            // @ts-ignore\n            onChange={(_, data: { value: string }): void => setMushroomId(data.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Quantity</label>\n          <input placeholder=\"quantity\" onChange={(e): void => setQuantity(e.target.value)} />\n        </Form.Field>\n        <Button type=\"submit\" primary>\n          Save\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nexport default withClientAuthRequired(NewHarvest);\n"]},"metadata":{},"sourceType":"module"}