{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx\";\nimport React, { useState } from 'react';\nimport { Button, Container, Form, Label, Select } from 'semantic-ui-react';\nimport useSWR from 'swr';\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport fetcher from '../../fetching/fetcher';\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport makePrediction from './queries/makePrediction';\nimport Header, { ActivePage } from '../../components/Header';\nimport { useRouter } from 'next/router';\nexport default function Predictions({\n  mushrooms\n}) {\n  const router = useRouter();\n  const {\n    0: date,\n    1: setDate\n  } = useState();\n  const {\n    0: locationId,\n    1: setLocationId\n  } = useState(router.query.locationId);\n  const {\n    0: mushroomId,\n    1: setMushroomId\n  } = useState();\n  const {\n    0: prediction,\n    1: setPrediction\n  } = useState();\n\n  const handleOnSubmit = async () => {\n    var _response$data;\n\n    const response = await makePrediction({\n      date,\n      locationId,\n      mushroomId\n    });\n    setPrediction(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.probability);\n  };\n\n  const handleOnChangeLocation = (_, data) => {\n    setLocationId(data.value);\n    router.push(`predictions/?locationId=${data.value}`, undefined, {\n      shallow: true\n    });\n  };\n\n  function transformLocationsInOptions() {\n    const result = useSWR(`/api/me/locations`, fetcher);\n    const locations = result.data; // const error: Error = result.error;\n    // if (error) {\n    //   return <div>Loading failed: {error.message}</div>;\n    // }\n    // if (!locations) {\n    //   return <div>Loading...</div>;\n    // }\n\n    return locations === null || locations === void 0 ? void 0 : locations.map(location => ({\n      key: location.id,\n      value: location.id,\n      text: location.name\n    }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(mushroom => ({\n      key: mushroom.id,\n      value: mushroom.id,\n      text: mushroom.scientificName\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      activePage: ActivePage.predictions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          padding: '0 100px'\n        },\n        onSubmit: handleOnSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            placeholder: \"Date\",\n            onChange: e => setDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Mushroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Mushroom\",\n            options: transformMushroomsInOptions(),\n            onChange: (_, data) => setMushroomId(data.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Seleciona localizaci\\xF3n\",\n            options: transformLocationsInOptions(),\n            onChange: handleOnChangeLocation,\n            value: locationId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          primary: true,\n          children: \"Make prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        children: prediction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getServerSideProps = withServerAuthRequired(async () => {\n  const resMushrooms = await getMushrooms();\n  return {\n    props: {\n      mushrooms: resMushrooms.data\n    }\n  };\n});","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx"],"names":["React","useState","Button","Container","Form","Label","Select","useSWR","withServerAuthRequired","fetcher","getMushrooms","makePrediction","Header","ActivePage","useRouter","Predictions","mushrooms","router","date","setDate","locationId","setLocationId","query","mushroomId","setMushroomId","prediction","setPrediction","handleOnSubmit","response","data","probability","handleOnChangeLocation","_","value","push","undefined","shallow","transformLocationsInOptions","result","locations","map","location","key","id","text","name","transformMushroomsInOptions","mushroom","scientificName","predictions","padding","e","target","getServerSideProps","resMushrooms","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Container, Form, Label, Select } from 'semantic-ui-react';\nimport { GetServerSideProps } from 'next';\nimport useSWR from 'swr';\n\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport fetcher from '../../fetching/fetcher';\n\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport makePrediction from './queries/makePrediction';\nimport Location from '../locations/models/Location';\nimport Header, { ActivePage } from '../../components/Header';\nimport { useRouter } from 'next/router';\n\ntype PredictionsProps = {\n  mushrooms: Array<{ id: string; scientificName: string }>;\n  locations: Array<{ id: string; name: string }>;\n};\n\nexport default function Predictions({ mushrooms }: PredictionsProps): JSX.Element {\n  const router = useRouter();\n\n  const [date, setDate] = useState();\n  const [locationId, setLocationId] = useState(router.query.locationId);\n  const [mushroomId, setMushroomId] = useState();\n  const [prediction, setPrediction] = useState();\n\n  const handleOnSubmit = async () => {\n    const response = await makePrediction({ date, locationId, mushroomId });\n\n    setPrediction(response?.data?.probability);\n  };\n\n  const handleOnChangeLocation = (_, data) => {\n    setLocationId(data.value);\n\n    router.push(`predictions/?locationId=${data.value}`, undefined, { shallow: true });\n  };\n\n  function transformLocationsInOptions() {\n    const result = useSWR(`/api/me/locations`, fetcher);\n    const locations: Array<Location> = result.data;\n    // const error: Error = result.error;\n\n    // if (error) {\n    //   return <div>Loading failed: {error.message}</div>;\n    // }\n\n    // if (!locations) {\n    //   return <div>Loading...</div>;\n    // }\n\n    return locations?.map((location) => ({ key: location.id, value: location.id, text: location.name }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  return (\n    <>\n      <Header activePage={ActivePage.predictions} />\n      <Container>\n        <Form\n          style={{\n            padding: '0 100px',\n          }}\n          onSubmit={handleOnSubmit}\n        >\n          <Form.Field>\n            <label>Date</label>\n            <input type=\"date\" placeholder=\"Date\" onChange={(e): void => setDate(e.target.value)} />\n          </Form.Field>\n          <Form.Field>\n            <label>Mushroom</label>\n            <Select\n              placeholder=\"Mushroom\"\n              options={transformMushroomsInOptions()}\n              onChange={(_, data): void => setMushroomId(data.value)}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Location</label>\n            <Select\n              placeholder=\"Seleciona localización\"\n              options={transformLocationsInOptions()}\n              onChange={handleOnChangeLocation}\n              value={locationId}\n            />\n          </Form.Field>\n          <Button type=\"submit\" primary>\n            Make prediction\n          </Button>\n        </Form>\n        <Label>{prediction}</Label>\n      </Container>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = withServerAuthRequired(async () => {\n  const resMushrooms = await getMushrooms();\n\n  return { props: { mushrooms: resMushrooms.data } };\n});\n"]},"metadata":{},"sourceType":"module"}