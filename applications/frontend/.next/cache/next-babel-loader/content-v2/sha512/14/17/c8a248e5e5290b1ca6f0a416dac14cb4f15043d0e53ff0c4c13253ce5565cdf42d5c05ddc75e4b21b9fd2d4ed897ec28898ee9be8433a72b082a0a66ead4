{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/MushroomsSelector/MushroomsSelector.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Select } from 'semantic-ui-react';\nimport useMushrooms from '../../queries/useMushrooms';\n\nvar MushroomsSelector = function MushroomsSelector(_ref) {\n  _s();\n\n  var onSelect = _ref.onSelect;\n\n  var _useMushrooms = useMushrooms(),\n      mushrooms = _useMushrooms.mushrooms,\n      isLoading = _useMushrooms.isLoading,\n      error = _useMushrooms.error;\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(function (mushroom) {\n      return {\n        key: mushroom.id,\n        value: mushroom.id,\n        text: mushroom.scientificName\n      };\n    });\n  }\n\n  if (error) {\n    // To-Do Implement error behaviour\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Loading failed: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, _this);\n  }\n\n  if (isLoading) {\n    // To-Do implement loading spinner\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"\\xBFQu\\xE9 seta?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"Seleciona especie\",\n      options: transformMushroomsInOptions(),\n      onChange: function onChange(_, data) {\n        return onSelect(data.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(MushroomsSelector, \"y2CSUQSCV2sEoO0f98d3HopevYo=\", false, function () {\n  return [useMushrooms];\n});\n\n_c = MushroomsSelector;\nexport default MushroomsSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"MushroomsSelector\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/MushroomsSelector/MushroomsSelector.tsx"],"names":["React","Select","useMushrooms","MushroomsSelector","onSelect","mushrooms","isLoading","error","transformMushroomsInOptions","map","mushroom","key","id","value","text","scientificName","message","_","data"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAA4BC,MAA5B,QAA0C,mBAA1C;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;;AAIA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAuD;AAAA;;AAAA,MAApDC,QAAoD,QAApDA,QAAoD;;AAAA,sBACvCF,YAAY,EAD2B;AAAA,MACvEG,SADuE,iBACvEA,SADuE;AAAA,MAC5DC,SAD4D,iBAC5DA,SAD4D;AAAA,MACjDC,KADiD,iBACjDA,KADiD;;AAG/E,WAASC,2BAAT,GAAiE;AAC/D,WAAOH,SAAS,CAACI,GAAV,CAAc,UAACC,QAAD;AAAA,aAAe;AAAEC,QAAAA,GAAG,EAAED,QAAQ,CAACE,EAAhB;AAAoBC,QAAAA,KAAK,EAAEH,QAAQ,CAACE,EAApC;AAAwCE,QAAAA,IAAI,EAAEJ,QAAQ,CAACK;AAAvD,OAAf;AAAA,KAAd,CAAP;AACD;;AAED,MAAIR,KAAJ,EAAW;AACT;AACA,wBAAO;AAAA,qCAAsBA,KAAK,CAACS,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,MAAIV,SAAJ,EAAe;AACb;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,MAAD;AACE,MAAA,WAAW,EAAC,mBADd;AAEE,MAAA,OAAO,EAAEE,2BAA2B,EAFtC;AAGE,MAAA,QAAQ,EAAE,kBAACS,CAAD,EAAIC,IAAJ;AAAA,eAAmBd,QAAQ,CAACc,IAAI,CAACL,KAAN,CAA3B;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAUD,CA3BD;;GAAMV,iB;UACoCD,Y;;;KADpCC,iB;AA6BN,eAAeA,iBAAf","sourcesContent":["import React from 'react';\nimport { DropdownItemProps, Select } from 'semantic-ui-react';\n\nimport useMushrooms from '../../queries/useMushrooms';\n\ntype MushroomsSelectorProps = { onSelect: (value: string) => void };\n\nconst MushroomsSelector = ({ onSelect }: MushroomsSelectorProps): JSX.Element => {\n  const { mushrooms, isLoading, error } = useMushrooms();\n\n  function transformMushroomsInOptions(): Array<DropdownItemProps> {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  if (error) {\n    // To-Do Implement error behaviour\n    return <div>Loading failed: {error.message}</div>;\n  }\n\n  if (isLoading) {\n    // To-Do implement loading spinner\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <label>¿Qué seta?</label>\n      <Select\n        placeholder=\"Seleciona especie\"\n        options={transformMushroomsInOptions()}\n        onChange={(_, data): void => onSelect(data.value as string)}\n      />\n    </>\n  );\n};\n\nexport default MushroomsSelector;\n"]},"metadata":{},"sourceType":"module"}