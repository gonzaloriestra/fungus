{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/sergiosanchez/Projects/fungus/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sergiosanchez/Projects/fungus/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Header, Icon, Container, Form, Select, Button, Label } from 'semantic-ui-react';\nimport makePrediction from './queries/makePrediction';\nexport var __N_SSP = true;\nexport default function Predictions(_ref) {\n  _s();\n\n  var locations = _ref.locations,\n      mushrooms = _ref.mushrooms;\n\n  var _useState = useState(),\n      date = _useState[0],\n      setDate = _useState[1];\n\n  var _useState2 = useState(),\n      locationId = _useState2[0],\n      setLocationId = _useState2[1];\n\n  var _useState3 = useState(),\n      mushroomId = _useState3[0],\n      setMushroomId = _useState3[1];\n\n  var _useState4 = useState(),\n      prediction = _useState4[0],\n      setPrediction = _useState4[1];\n\n  var handleOnSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _response$data;\n\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return makePrediction({\n                date: date,\n                locationId: locationId,\n                mushroomId: mushroomId\n              });\n\n            case 2:\n              response = _context.sent;\n              setPrediction(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.probability);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleOnSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function transformLocationsInOptions() {\n    return locations.map(function (location) {\n      return {\n        key: location.id,\n        value: location.id,\n        text: location.name\n      };\n    });\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(function (mushroom) {\n      return {\n        key: mushroom.id,\n        value: mushroom.id,\n        text: mushroom.scientificName\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"map outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header.Content, {\n        children: \"Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          padding: '0 100px'\n        },\n        onSubmit: handleOnSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            placeholder: \"Date\",\n            onChange: function onChange(e) {\n              return setDate(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Mushroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Mushroom\",\n            options: transformMushroomsInOptions(),\n            onChange: function onChange(_, data) {\n              return setMushroomId(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            placeholder: \"Location\",\n            options: transformLocationsInOptions(),\n            onChange: function onChange(_, data) {\n              return setLocationId(data.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          primary: true,\n          children: \"Make prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        children: prediction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Predictions, \"VKVGUb8PuT38ojFJIDmTG1lhE1k=\");\n\n_c = Predictions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/predictions/index.tsx"],"names":["React","useState","Header","Icon","Container","Form","Select","Button","Label","makePrediction","Predictions","locations","mushrooms","date","setDate","locationId","setLocationId","mushroomId","setMushroomId","prediction","setPrediction","handleOnSubmit","response","data","probability","transformLocationsInOptions","map","location","key","id","value","text","name","transformMushroomsInOptions","mushroom","scientificName","padding","e","target","_"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Header, Icon, Container, Form, Select, Button, Label } from 'semantic-ui-react';\nimport { GetServerSideProps } from 'next';\nimport getMushrooms from '../harvests/queries/getMushrooms';\nimport getMyLocations from '../locations/queries/getMyLocations';\nimport makePrediction from './queries/makePrediction';\n\ntype PredictionsProps = {\n  mushrooms: Array<{ id: string; scientificName: string }>;\n  locations: Array<{ id: string; name: string }>;\n};\n\nexport default function Predictions({ locations, mushrooms }: PredictionsProps): JSX.Element {\n  const [date, setDate] = useState();\n  const [locationId, setLocationId] = useState();\n  const [mushroomId, setMushroomId] = useState();\n  const [prediction, setPrediction] = useState();\n\n  const handleOnSubmit = async () => {\n    const response = await makePrediction({ date, locationId, mushroomId });\n\n    setPrediction(response?.data?.probability);\n  };\n\n  function transformLocationsInOptions() {\n    return locations.map((location) => ({ key: location.id, value: location.id, text: location.name }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map((mushroom) => ({ key: mushroom.id, value: mushroom.id, text: mushroom.scientificName }));\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">\n        <Icon name=\"map outline\" />\n        <Header.Content>Predictions</Header.Content>\n      </Header>\n      <Container>\n        <Form\n          style={{\n            padding: '0 100px',\n          }}\n          onSubmit={handleOnSubmit}\n        >\n          <Form.Field>\n            <label>Date</label>\n            <input type=\"date\" placeholder=\"Date\" onChange={(e): void => setDate(e.target.value)} />\n          </Form.Field>\n          <Form.Field>\n            <label>Mushroom</label>\n            <Select\n              placeholder=\"Mushroom\"\n              options={transformMushroomsInOptions()}\n              onChange={(_, data): void => setMushroomId(data.value)}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Location</label>\n            <Select\n              placeholder=\"Location\"\n              options={transformLocationsInOptions()}\n              onChange={(_, data): void => setLocationId(data.value)}\n            />\n          </Form.Field>\n          <Button type=\"submit\" primary>\n            Make prediction\n          </Button>\n        </Form>\n        <Label>{prediction}</Label>\n      </Container>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const resMushrooms = await getMushrooms();\n  // To-Do Share this query\n  const resLocations = await getMyLocations();\n\n  return { props: { mushrooms: resMushrooms.data, locations: resLocations.data } };\n};\n"]},"metadata":{},"sourceType":"module"}