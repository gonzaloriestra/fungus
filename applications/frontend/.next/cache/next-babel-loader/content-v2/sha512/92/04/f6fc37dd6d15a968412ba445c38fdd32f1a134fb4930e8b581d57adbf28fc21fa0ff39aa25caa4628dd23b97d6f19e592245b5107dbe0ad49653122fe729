{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/index.tsx\";\nimport React from 'react';\nimport { Header, Icon, Item as SemanticItem, Container, Button, Loader } from 'semantic-ui-react';\nimport Link from 'next/link';\nimport useSWR from 'swr';\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport getMyLocations from './queries/getMyLocations';\nimport Item from './components/Item';\n\nconst fetcher = async url => {\n  const res = await fetch(url);\n\n  if (!res.ok) {\n    throw Error(\"Yo that's NOT OK!!!\");\n  }\n\n  const data = await res.json();\n  return data;\n};\n\nexport default function Locations({\n  locations\n}) {\n  const result = useSWR(`/api/me/locations`, fetcher);\n  const data = result.data;\n  const error = result.error;\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Loading failed: \", error.message]\n    }, void 0, true);\n  }\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(Loader, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      children: [/*#__PURE__*/_jsxDEV(Icon, {\n        name: \"map outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header.Content, {\n        children: \"Locations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        href: \"/locations/new\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          primary: true,\n          children: \"Add Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SemanticItem.Group, {\n        divided: true,\n        children: locations.map(location => /*#__PURE__*/_jsxDEV(Item, {\n          title: location.name,\n          imageSrc: \"/map.svg\",\n          detailsUrl: `locations/${location.id}`\n        }, location.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getServerSideProps = withServerAuthRequired(async () => {\n  const res = await getMyLocations();\n  return {\n    props: {\n      locations: res.data\n    }\n  };\n});","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/index.tsx"],"names":["React","Header","Icon","Item","SemanticItem","Container","Button","Loader","Link","useSWR","withServerAuthRequired","getMyLocations","fetcher","url","res","fetch","ok","Error","data","json","Locations","locations","result","error","message","map","location","name","id","getServerSideProps","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,IAAI,IAAIC,YAA9B,EAA4CC,SAA5C,EAAuDC,MAAvD,EAA+DC,MAA/D,QAA4E,mBAA5E;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,SAASC,sBAAT,QAAuC,uCAAvC;AAGA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,OAAOR,IAAP,MAAiB,mBAAjB;;AAUA,MAAMS,OAAO,GAAG,MAAOC,GAAP,IAAuB;AACrC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;;AACA,MAAI,CAACC,GAAG,CAACE,EAAT,EAAa;AACX,UAAMC,KAAK,CAAC,qBAAD,CAAX;AACD;;AACD,QAAMC,IAAU,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAzB;AACA,SAAOD,IAAP;AACD,CAPD;;AASA,eAAe,SAASE,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA+D;AAC5E,QAAMC,MAAM,GAAGb,MAAM,CAAE,mBAAF,EAAsBG,OAAtB,CAArB;AACA,QAAMM,IAAU,GAAGI,MAAM,CAACJ,IAA1B;AACA,QAAMK,KAAY,GAAGD,MAAM,CAACC,KAA5B;;AAEA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,qCAAmBA,KAAK,CAACC,OAAzB;AAAA,oBAAP;AACD;;AAED,MAAI,CAACN,IAAL,EAAW;AACT,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,SAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,gBAAX;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,YAAD,CAAc,KAAd;AAAoB,QAAA,OAAO,MAA3B;AAAA,kBACGG,SAAS,CAACI,GAAV,CAAeC,QAAD,iBACb,QAAC,IAAD;AAAwB,UAAA,KAAK,EAAEA,QAAQ,CAACC,IAAxC;AAA8C,UAAA,QAAQ,EAAC,UAAvD;AAAkE,UAAA,UAAU,EAAG,aAAYD,QAAQ,CAACE,EAAG;AAAvG,WAAWF,QAAQ,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAkBD;AAED,OAAO,MAAMC,kBAAsC,GAAGnB,sBAAsB,CAAC,YAAY;AACvF,QAAMI,GAAG,GAAG,MAAMH,cAAc,EAAhC;AAEA,SAAO;AAAEmB,IAAAA,KAAK,EAAE;AAAET,MAAAA,SAAS,EAAEP,GAAG,CAACI;AAAjB;AAAT,GAAP;AACD,CAJ2E,CAArE","sourcesContent":["import React from 'react';\nimport {Header, Icon, Item as SemanticItem, Container, Button, Loader} from 'semantic-ui-react';\nimport { GetServerSideProps } from 'next';\nimport Link from 'next/link';\nimport useSWR from 'swr';\n\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\n\nimport Location from './models/Location';\nimport getMyLocations from './queries/getMyLocations';\n\nimport Item from './components/Item';\n\ntype LocationsProps = {\n  locations: Array<Location>;\n};\n\ntype Data = {\n  locations: object;\n};\n\nconst fetcher = async (url: string) => {\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw Error(\"Yo that's NOT OK!!!\");\n  }\n  const data: Data = await res.json();\n  return data;\n};\n\nexport default function Locations({ locations }: LocationsProps): JSX.Element {\n  const result = useSWR(`/api/me/locations`, fetcher);\n  const data: Data = result.data;\n  const error: Error = result.error;\n\n  if (error) {\n    return <>Loading failed: {error.message}</>;\n  }\n\n  if (!data) {\n    return <Loader>Loading...</Loader>;\n  }\n\n  return (\n    <>\n      <Header as=\"h1\">\n        <Icon name=\"map outline\" />\n        <Header.Content>Locations</Header.Content>\n      </Header>\n      <Container>\n        <Link href=\"/locations/new\">\n          <Button primary>Add Location</Button>\n        </Link>\n        <SemanticItem.Group divided>\n          {locations.map((location) => (\n            <Item key={location.id} title={location.name} imageSrc=\"/map.svg\" detailsUrl={`locations/${location.id}`} />\n          ))}\n        </SemanticItem.Group>\n      </Container>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = withServerAuthRequired(async () => {\n  const res = await getMyLocations();\n\n  return { props: { locations: res.data } };\n});\n"]},"metadata":{},"sourceType":"module"}