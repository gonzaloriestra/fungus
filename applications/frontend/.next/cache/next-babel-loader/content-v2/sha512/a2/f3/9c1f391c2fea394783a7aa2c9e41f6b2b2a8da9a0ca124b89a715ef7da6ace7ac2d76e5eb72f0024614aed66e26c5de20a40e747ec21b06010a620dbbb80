{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/Map/Map.tsx\";\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, WMSTileLayer, TileLayer, Polygon } from 'react-leaflet';\nimport styles from './map.module.css';\nimport MapEditionControls from './MapEditionControls';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.midpoint) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = () => {}\n}) => {\n  const initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n  const {\n    0: position\n  } = useState(initialPosition);\n  const {\n    0: zoom\n  } = useState(initialZoom);\n  const {\n    0: hasLocationDefined,\n    1: setHasLocationDefined\n  } = useState(mode === 'view');\n\n  const renderLocation = location => {\n    if (!location) {\n      return null;\n    }\n\n    const zone = location === null || location === void 0 ? void 0 : location.zone;\n    return /*#__PURE__*/_jsxDEV(Polygon, {\n      positions: zone.coordinates.map(coordinate => [coordinate.latitude, coordinate.longitude])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MapLeaflet, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WMSTileLayer, {\n      url: \"https://www.ign.es/wms-inspire/ign-base\",\n      format: \"image/png\",\n      layers: \"IGNBaseOrto\",\n      transparent: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapEditionControls, {\n      mode: mode,\n      onLocationCreated: onLocationCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), renderLocation(location)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","WMSTileLayer","TileLayer","Polygon","styles","MapEditionControls","mapPositionFromZone","zone","midpoint","lat","latitude","lng","longitude","mode","location","initialZoom","onLocationCreated","initialPosition","position","zoom","hasLocationDefined","setHasLocationDefined","renderLocation","coordinates","map","coordinate","container"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,YAA5B,EAA0CC,SAA1C,EAAqDC,OAArD,QAAkF,eAAlF;AAIA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;;AASA,SAASC,mBAAT,CAA6BC,IAA7B,EAAiE;AAC/D,MAAIA,IAAI,IAAIA,IAAI,CAACC,QAAjB,EAA2B;AACzB,WAAO;AAAEC,MAAAA,GAAG,EAAEF,IAAI,CAACC,QAAL,CAAcE,QAArB;AAA+BC,MAAAA,GAAG,EAAEJ,IAAI,CAACC,QAAL,CAAcI;AAAlD,KAAP;AACD;AACF;;AAED,MAAMb,GAAG,GAAG,CAAC;AACXc,EAAAA,IAAI,GAAG,MADI;AAEXC,EAAAA,QAFW;AAGXC,EAAAA,WAAW,GAAG,EAHH;AAIXC,EAAAA,iBAAiB,GAAG,MAAY,CAAE;AAJvB,CAAD,KAKiB;AAC3B,QAAMC,eAAe,GAAGX,mBAAmB,CAACQ,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEP,IAAX,CAAnB,IAAuC;AAAEE,IAAAA,GAAG,EAAE,SAAP;AAAkBE,IAAAA,GAAG,EAAE,CAAC;AAAxB,GAA/D;AAEA,QAAM;AAAA,OAACO;AAAD,MAAapB,QAAQ,CAACmB,eAAD,CAA3B;AACA,QAAM;AAAA,OAACE;AAAD,MAASrB,QAAQ,CAACiB,WAAD,CAAvB;AACA,QAAM;AAAA,OAACK,kBAAD;AAAA,OAAqBC;AAArB,MAA8CvB,QAAQ,CAACe,IAAI,KAAK,MAAV,CAA5D;;AAEA,QAAMS,cAAc,GAAIR,QAAD,IAA2B;AAChD,QAAI,CAACA,QAAL,EAAe;AACb,aAAO,IAAP;AACD;;AAED,UAAMP,IAAI,GAAGO,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEP,IAAvB;AAEA,wBAAO,QAAC,OAAD;AAAS,MAAA,SAAS,EAAEA,IAAI,CAACgB,WAAL,CAAiBC,GAAjB,CAAsBC,UAAD,IAAgB,CAACA,UAAU,CAACf,QAAZ,EAAsBe,UAAU,CAACb,SAAjC,CAArC;AAApB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GARD;;AAUA,sBACE,QAAC,UAAD;AAAY,IAAA,SAAS,EAAER,MAAM,CAACsB,SAA9B;AAAyC,IAAA,MAAM,EAAER,QAAjD;AAA2D,IAAA,IAAI,EAAEC,IAAjE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,GAAG,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAc,MAAA,GAAG,EAAC,yCAAlB;AAA4D,MAAA,MAAM,EAAC,WAAnE;AAA+E,MAAA,MAAM,EAAC,aAAtF;AAAoG,MAAA,WAAW;AAA/G;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE,QAAC,kBAAD;AAAoB,MAAA,IAAI,EAAEN,IAA1B;AAAgC,MAAA,iBAAiB,EAAEG;AAAnD;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGM,cAAc,CAACR,QAAD,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA/BD;;AAiCA,eAAef,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, WMSTileLayer, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\nimport Coordinate from '../../models/Coordinate';\nimport MapEditionControls from './MapEditionControls';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nfunction mapPositionFromZone(zone): { lat: number; lng: number } {\n  if (zone && zone.midpoint) {\n    return { lat: zone.midpoint.latitude, lng: zone.midpoint.longitude };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = (): void => {},\n}: MapProps): JSX.Element => {\n  const initialPosition = mapPositionFromZone(location?.zone) || { lat: 42.829022, lng: -4.849545 };\n\n  const [position] = useState(initialPosition);\n  const [zoom] = useState(initialZoom);\n  const [hasLocationDefined, setHasLocationDefined] = useState(mode === 'view');\n\n  const renderLocation = (location): JSX.Element => {\n    if (!location) {\n      return null;\n    }\n\n    const zone = location?.zone;\n\n    return <Polygon positions={zone.coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude])} />;\n  };\n\n  return (\n    <MapLeaflet className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      <WMSTileLayer url=\"https://www.ign.es/wms-inspire/ign-base\" format=\"image/png\" layers=\"IGNBaseOrto\" transparent />\n      {/*{renderEditionMode(mode)}*/}\n      <MapEditionControls mode={mode} onLocationCreated={onLocationCreated} />\n      {renderLocation(location)}\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}