{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sergiosanchez/Projects/fungus/applications/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sergiosanchez/Projects/fungus/applications/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport APIClient from '../pages/api/APIClient';\nexport default function makePrediction(_x) {\n  return _makePrediction.apply(this, arguments);\n}\n\nfunction _makePrediction() {\n  _makePrediction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var date, locationId, mushroomId, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            date = _ref.date, locationId = _ref.locationId, mushroomId = _ref.mushroomId;\n            _context.next = 3;\n            return APIClient.get({\n              path: \"/predictions?locationId=\".concat(locationId, \"&mushroomId=\").concat(mushroomId, \"&date=\").concat(date)\n            });\n\n          case 3:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            throw Error('Sommething happens feching the info!!!');\n\n          case 6:\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _makePrediction.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/commands/makePrediction.ts"],"names":["APIClient","makePrediction","date","locationId","mushroomId","get","path","response","ok","Error","json"],"mappings":";;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AAIA,wBAA8BC,cAA9B;AAAA;AAAA;;;6EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCC,YAAAA,IAAhC,QAAgCA,IAAhC,EAAsCC,UAAtC,QAAsCA,UAAtC,EAAkDC,UAAlD,QAAkDA,UAAlD;AAAA;AAAA,mBACUJ,SAAS,CAACK,GAAV,CAAc;AACnCC,cAAAA,IAAI,oCAA6BH,UAA7B,yBAAsDC,UAAtD,mBAAyEF,IAAzE;AAD+B,aAAd,CADV;;AAAA;AACPK,YAAAA,QADO;;AAAA,gBAKRA,QAAQ,CAACC,EALD;AAAA;AAAA;AAAA;;AAAA,kBAMLC,KAAK,CAAC,wCAAD,CANA;;AAAA;AAAA;AAAA,mBASAF,QAAQ,CAACG,IAAT,EATA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios';\nimport APIClient from '../pages/api/APIClient';\n\ntype QueryResponse = { probability: string };\n\nexport default async function makePrediction({ date, locationId, mushroomId }): Promise<Response> {\n  const response = await APIClient.get({\n    path: `/predictions?locationId=${locationId}&mushroomId=${mushroomId}&date=${date}`,\n  });\n\n  if (!response.ok) {\n    throw Error('Sommething happens feching the info!!!');\n  }\n\n  return await response.json();\n  // return axios.get(`http://localhost:3001/locations/${locationId}/mushrooms/${mushroomId}/predictions?date=${date}`);\n}\n"]},"metadata":{},"sourceType":"module"}