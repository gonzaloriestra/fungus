{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Button, Header as SemanticHeader, Icon } from 'semantic-ui-react';\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport getLocation from './queries/getLocation';\nimport Map from './components/Map';\nimport HarvestList from './components/HarvestList';\nimport getHarvestsByLocationId from './queries/getHarvestsByLocationId';\nimport Link from 'next/link';\nimport Header, { ActivePage } from '../../components/Header';\nexport default function LocationDetails({\n  location,\n  harvests\n}) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      activePage: ActivePage.locations\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        height: '500px',\n        padding: '0 100px'\n      },\n      children: /*#__PURE__*/_jsx(Map, {\n        location: location\n      })\n    }), /*#__PURE__*/_jsxs(SemanticHeader, {\n      as: \"h2\",\n      children: [/*#__PURE__*/_jsx(Icon, {\n        name: \"calendar alternate outline\"\n      }), /*#__PURE__*/_jsx(SemanticHeader.Content, {\n        children: \"Harvests\"\n      })]\n    }), /*#__PURE__*/_jsx(HarvestList, {\n      harvests: harvests\n    }), /*#__PURE__*/_jsx(Link, {\n      href: `/harvests/new?locationId=${location.id}`,\n      children: /*#__PURE__*/_jsx(Button, {\n        primary: true,\n        children: \"Add Harvest\"\n      })\n    })]\n  });\n}\nexport const getServerSideProps = withServerAuthRequired(async ({\n  params\n}) => {\n  const resLocation = await getLocation({\n    id: params.id\n  });\n  let harvests;\n\n  try {\n    const resHarvests = await getHarvestsByLocationId({\n      locationId: params.id\n    });\n    harvests = resHarvests === null || resHarvests === void 0 ? void 0 : resHarvests.data;\n  } catch (error) {\n    harvests = [];\n  } // To-Do: Controls errors\n\n\n  return {\n    props: {\n      location: resLocation.data,\n      harvests\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}