{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { Button, Container, Form, Select, Header as SemanticHeader, Dimmer, Icon } from 'semantic-ui-react';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\nimport { withServerAuthRequired } from '../../authentication/withAuthRequired';\nimport fetcher from '../../fetching/fetcher';\nimport getMushrooms from '../../queries/getMushrooms';\nimport makePrediction from '../../queries/makePrediction';\nimport Header, { ActivePage } from '../../components/Header';\nexport default function Predictions({\n  mushrooms\n}) {\n  const router = useRouter();\n  const {\n    0: date,\n    1: setDate\n  } = useState('');\n  const {\n    0: locationId,\n    1: setLocationId\n  } = useState(router.query.locationId);\n  const {\n    0: mushroomId,\n    1: setMushroomId\n  } = useState('');\n  const {\n    0: prediction,\n    1: setPrediction\n  } = useState('');\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n\n  const handleOnSubmit = async () => {\n    var _response$data;\n\n    const response = await makePrediction({\n      date,\n      locationId,\n      mushroomId\n    });\n    setPrediction(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.probability);\n    setActive(true);\n  };\n\n  const handleClose = () => setActive(false);\n\n  const handleOnChangeLocation = (_, data) => {\n    setLocationId(data.value);\n    router.push(`predictions/?locationId=${data.value}`, undefined, {\n      shallow: true\n    });\n  };\n\n  function transformLocationsInOptions() {\n    const result = useSWR(`/api/me/locations`, fetcher);\n    const locations = result.data; // const error: Error = result.error;\n    // if (error) {\n    //   return <div>Loading failed: {error.message}</div>;\n    // }\n    // if (!locations) {\n    //   return <div>Loading...</div>;\n    // }\n\n    return locations === null || locations === void 0 ? void 0 : locations.map(location => ({\n      key: location.id,\n      value: location.id,\n      text: location.name\n    }));\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(mushroom => ({\n      key: mushroom.id,\n      value: mushroom.id,\n      text: mushroom.scientificName\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      activePage: ActivePage.predictions\n    }), /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsxs(Form, {\n        onSubmit: handleOnSubmit,\n        children: [/*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"\\xBFCu\\xE1ndo?\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"date\",\n            onChange: e => setDate(e.target.value),\n            placeholder: \"Introduce fecha\"\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"\\xBFQu\\xE9 seta?\"\n          }), /*#__PURE__*/_jsx(Select, {\n            placeholder: \"Seleciona especie\",\n            options: transformMushroomsInOptions() // @ts-ignore\n            ,\n            onChange: (_, data) => setMushroomId(data.value)\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"\\xBFPara qu\\xE9 localizaci\\xF3n?\"\n          }), /*#__PURE__*/_jsx(Select, {\n            placeholder: \"Seleciona localizaci\\xF3n\",\n            options: transformLocationsInOptions(),\n            onChange: handleOnChangeLocation,\n            value: locationId\n          })]\n        }), /*#__PURE__*/_jsx(Button, {\n          floated: 'right',\n          type: \"submit\",\n          primary: true,\n          children: \"Mostrar predicci\\xF3n\"\n        })]\n      }), /*#__PURE__*/_jsx(Dimmer, {\n        active: active,\n        onClickOutside: handleClose,\n        page: true,\n        children: /*#__PURE__*/_jsxs(SemanticHeader, {\n          as: \"h2\",\n          icon: true,\n          inverted: true,\n          children: [/*#__PURE__*/_jsx(Icon, {\n            name: \"heart\"\n          }), /*#__PURE__*/_jsx(SemanticHeader.Subheader, {\n            children: prediction\n          })]\n        })\n      })]\n    })]\n  });\n}\nexport const getServerSideProps = withServerAuthRequired(async () => {\n  const resMushrooms = await getMushrooms();\n  return {\n    props: {\n      mushrooms: resMushrooms.data\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}