{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\";\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, WMSTileLayer, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.midpoint) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = () => {}\n}) => {\n  const initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n  const {\n    0: position\n  } = useState(initialPosition);\n  const {\n    0: zoom\n  } = useState(initialZoom);\n\n  const renderEditionMode = mode => {\n    if (mode !== 'edit') {\n      return null;\n    }\n\n    const handleOnCreate = event => {\n      var _event$layer, _event$layer$editing;\n\n      if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n        var _event$layer2, _event$layer2$editing;\n\n        const coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n        onLocationCreated(coordinates.map(coordinate => ({\n          latitude: coordinate.lat,\n          longitude: coordinate.lng\n        })));\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n      children: /*#__PURE__*/_jsxDEV(EditControl, {\n        position: \"topright\",\n        draw: {\n          rectangle: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polyline: false,\n          polygon: {\n            allowIntersection: false,\n            drawError: {\n              color: '#e1e100',\n              message: 'Oops! no puedes dibujar esa forma.'\n            },\n            shapeOptions: {\n              color: '#b5cc18'\n            }\n          },\n          toolbar: {\n            actions: {\n              title: 'Guardar cambios',\n              text: 'Guardar',\n              finish: {\n                title: 'اتمام ترسیم',\n                text: 'اتمام'\n              },\n              undo: {\n                title: 'حذف آخرین نقطه ی ترسم  شده',\n                text: 'حذف اخرین نقطه'\n              },\n              save: {\n                title: 'Guardar cambios',\n                text: 'Guardar'\n              },\n              cancel: {\n                title: 'Cancelar editing, discards all changes',\n                text: 'Cancela'\n              },\n              clearAll: {\n                title: 'Limpiar all layers',\n                text: 'Limpiar'\n              }\n            },\n            buttons: {\n              polygon: 'Dibuja algo sexy',\n              editDisabled: 'No capas to edit',\n              remove: 'Borrar layers',\n              removeDisabled: 'No capas to delete'\n            }\n          },\n          handlers: {\n            polygon: {\n              tooltip: {\n                start: 'Pulsa to start drawing shape.',\n                cont: 'Pulsa to continue drawing shape.',\n                end: 'Pulsa first point to close this shape.'\n              }\n            }\n          }\n        },\n        edit: {\n          toolbar: {\n            actions: {\n              save: {\n                title: 'Guardar changes',\n                text: 'Guardar'\n              },\n              cancel: {\n                title: 'Cancelar editing, discards all changes',\n                text: 'Cancelar'\n              },\n              clearAll: {\n                title: 'Limpiar all layers',\n                text: 'Limpiar'\n              }\n            },\n            buttons: {\n              edit: 'Editar layers',\n              editDisabled: 'No capas to edit',\n              remove: 'Borrar layers',\n              removeDisabled: 'No capas to delete'\n            }\n          },\n          handlers: {\n            edit: {\n              tooltip: {\n                text: 'Dibuja handles or markers to edit features.',\n                subtext: 'Cancela para deshacer los cambios.'\n              }\n            },\n            remove: {\n              tooltip: {\n                text: 'Pulsa on a feature to remove.'\n              }\n            }\n          }\n        },\n        onCreated: handleOnCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderLocation = location => {\n    if (!location) {\n      return null;\n    }\n\n    const zone = location === null || location === void 0 ? void 0 : location.zone;\n    return /*#__PURE__*/_jsxDEV(Polygon, {\n      positions: zone.coordinates.map(coordinate => [coordinate.latitude, coordinate.longitude])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MapLeaflet, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WMSTileLayer, {\n      url: \"https://www.ign.es/wms-inspire/ign-base\",\n      format: \"image/png\",\n      layers: \"IGNBaseOrto\",\n      transparent: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), renderEditionMode(mode), renderLocation(location)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","WMSTileLayer","TileLayer","Polygon","FeatureGroup","EditControl","styles","mapPositionFromZone","zone","midpoint","lat","latitude","lng","longitude","mode","location","initialZoom","onLocationCreated","initialPosition","position","zoom","renderEditionMode","handleOnCreate","event","layer","editing","latlngs","coordinates","map","coordinate","rectangle","circle","marker","circlemarker","polyline","polygon","allowIntersection","drawError","color","message","shapeOptions","toolbar","actions","title","text","finish","undo","save","cancel","clearAll","buttons","editDisabled","remove","removeDisabled","handlers","tooltip","start","cont","end","edit","subtext","renderLocation","container"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, WMSTileLayer, TileLayer, Polygon, FeatureGroup, ZoomControl } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nfunction mapPositionFromZone(zone): LatLngExpression {\n  if (zone && zone.midpoint) {\n    return { lat: zone.midpoint.latitude, lng: zone.midpoint.longitude };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = (): void => {},\n}: MapProps): JSX.Element => {\n  const initialPosition = mapPositionFromZone(location?.zone) || { lat: 42.829022, lng: -4.849545 };\n\n  const [position] = useState(initialPosition);\n  const [zoom] = useState(initialZoom);\n\n  const renderEditionMode = (mode): JSX.Element => {\n    if (mode !== 'edit') {\n      return null;\n    }\n    const handleOnCreate = (event): void => {\n      if (event.layer?.editing?.latlngs[0][0]) {\n        const coordinates = event.layer?.editing?.latlngs[0][0];\n\n        onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n      }\n    };\n\n    return (\n      <FeatureGroup>\n        <EditControl\n          position=\"topright\"\n          draw={{\n            rectangle: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n            polyline: false,\n            polygon: {\n              allowIntersection: false,\n              drawError: {\n                color: '#e1e100',\n                message: 'Oops! no puedes dibujar esa forma.',\n              },\n              shapeOptions: {\n                color: '#b5cc18',\n              },\n            },\n            toolbar: {\n              actions: {\n                title: 'Guardar cambios',\n                text: 'Guardar',\n                finish: {\n                  title: 'اتمام ترسیم',\n                  text: 'اتمام',\n                },\n                undo: {\n                  title: 'حذف آخرین نقطه ی ترسم  شده',\n                  text: 'حذف اخرین نقطه',\n                },\n                save: {\n                  title: 'Guardar cambios',\n                  text: 'Guardar',\n                },\n                cancel: {\n                  title: 'Cancelar editing, discards all changes',\n                  text: 'Cancela',\n                },\n                clearAll: {\n                  title: 'Limpiar all layers',\n                  text: 'Limpiar',\n                },\n              },\n              buttons: {\n                polygon: 'Dibuja algo sexy',\n                editDisabled: 'No capas to edit',\n                remove: 'Borrar layers',\n                removeDisabled: 'No capas to delete',\n              },\n            },\n            handlers: {\n              polygon: {\n                tooltip: {\n                  start: 'Pulsa to start drawing shape.',\n                  cont: 'Pulsa to continue drawing shape.',\n                  end: 'Pulsa first point to close this shape.',\n                },\n              },\n            },\n          }}\n          edit={{\n            toolbar: {\n              actions: {\n                save: {\n                  title: 'Guardar changes',\n                  text: 'Guardar',\n                },\n                cancel: {\n                  title: 'Cancelar editing, discards all changes',\n                  text: 'Cancelar',\n                },\n                clearAll: {\n                  title: 'Limpiar all layers',\n                  text: 'Limpiar',\n                },\n              },\n              buttons: {\n                edit: 'Editar layers',\n                editDisabled: 'No capas to edit',\n                remove: 'Borrar layers',\n                removeDisabled: 'No capas to delete',\n              },\n            },\n            handlers: {\n              edit: {\n                tooltip: {\n                  text: 'Dibuja handles or markers to edit features.',\n                  subtext: 'Cancela para deshacer los cambios.',\n                },\n              },\n              remove: {\n                tooltip: {\n                  text: 'Pulsa on a feature to remove.',\n                },\n              },\n            },\n          }}\n          onCreated={handleOnCreate}\n        />\n      </FeatureGroup>\n    );\n  };\n\n  const renderLocation = (location): JSX.Element => {\n    if (!location) {\n      return null;\n    }\n\n    const zone = location?.zone;\n\n    return <Polygon positions={zone.coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude])} />;\n  };\n\n  return (\n    <MapLeaflet className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      {/*<TileLayer url=\"https://www.ign.es/wmts/ign-base/IGNBase-gris/{z}/{x}/{-y}.png\" />*/}\n      {/*<TileLayer url=\"http://wms.ign.gob.ar/geoserver/gwc/service/tms/1.0.0/capabaseargenmap@EPSG%3A3857@png/{z}/{x}/{-y}.png\" />*/}\n      <WMSTileLayer url=\"https://www.ign.es/wms-inspire/ign-base\" format=\"image/png\" layers=\"IGNBaseOrto\" transparent />\n      {renderEditionMode(mode)}\n      {renderLocation(location)}\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}