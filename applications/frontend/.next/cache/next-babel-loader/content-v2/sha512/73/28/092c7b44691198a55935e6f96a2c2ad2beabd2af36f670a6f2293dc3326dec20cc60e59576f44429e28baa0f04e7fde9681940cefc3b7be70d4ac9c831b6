{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, WMSTileLayer, TileLayer, Polygon, FeatureGroup, useMap } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.midpoint) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nvar Map = function Map(_ref) {\n  _s();\n\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'view' : _ref$mode,\n      location = _ref.location,\n      _ref$initialZoom = _ref.initialZoom,\n      initialZoom = _ref$initialZoom === void 0 ? 15 : _ref$initialZoom,\n      _ref$onLocationCreate = _ref.onLocationCreated,\n      onLocationCreated = _ref$onLocationCreate === void 0 ? function () {} : _ref$onLocationCreate;\n  var initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n\n  var _useState = useState(initialPosition),\n      position = _useState[0];\n\n  var _useState2 = useState(initialZoom),\n      zoom = _useState2[0];\n\n  var _useState3 = useState(mode === 'view'),\n      hasLocationDefined = _useState3[0],\n      setHasLocationDefined = _useState3[1];\n\n  var map = useMap();\n\n  var renderEditionMode = function renderEditionMode(mode) {\n    if (mode !== 'edit') {\n      return null;\n    }\n\n    var handleOnCreate = function handleOnCreate(event) {\n      var _event$layer, _event$layer$editing;\n\n      if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n        var _event$layer2, _event$layer2$editing;\n\n        var coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n        setHasLocationDefined(true);\n        onLocationCreated(coordinates.map(function (coordinate) {\n          return {\n            latitude: coordinate.lat,\n            longitude: coordinate.lng\n          };\n        }));\n      }\n    };\n\n    var handleOnDelete = function handleOnDelete(event) {\n      var _event$layers;\n\n      if (((_event$layers = event.layers) === null || _event$layers === void 0 ? void 0 : _event$layers.getLayers().length) > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n      children: /*#__PURE__*/_jsxDEV(EditControl, {\n        position: \"topright\",\n        draw: {\n          rectangle: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polyline: false,\n          polygon: hasLocationDefined ? false : {\n            allowIntersection: false,\n            drawError: {\n              color: '#e1e100',\n              message: 'Oops! you cannot draw in that way.'\n            },\n            shapeOptions: {\n              color: '#b5cc18'\n            }\n          }\n        },\n        onCreated: handleOnCreate,\n        onDeleted: handleOnDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, _this);\n  };\n\n  var renderLocation = function renderLocation(location) {\n    if (!location) {\n      return null;\n    }\n\n    var zone = location === null || location === void 0 ? void 0 : location.zone;\n    var positions = zone.coordinates.map(function (coordinate) {\n      return [coordinate.latitude, coordinate.longitude];\n    });\n    map.fitBounds(positions);\n    return /*#__PURE__*/_jsxDEV(Polygon, {\n      positions: positions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MapLeaflet, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(WMSTileLayer, {\n      url: \"https://www.ign.es/wms-inspire/ign-base\",\n      format: \"image/png\",\n      layers: \"IGNBaseOrto\",\n      transparent: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, _this), renderEditionMode(mode), renderLocation(location)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Map, \"NN8AAka1jDPdkFJ8YFD3lr/96Y8=\", false, function () {\n  return [useMap];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","WMSTileLayer","TileLayer","Polygon","FeatureGroup","useMap","EditControl","styles","mapPositionFromZone","zone","midpoint","lat","latitude","lng","longitude","mode","location","initialZoom","onLocationCreated","initialPosition","position","zoom","hasLocationDefined","setHasLocationDefined","map","renderEditionMode","handleOnCreate","event","layer","editing","latlngs","coordinates","coordinate","handleOnDelete","layers","getLayers","length","rectangle","circle","marker","circlemarker","polyline","polygon","allowIntersection","drawError","color","message","shapeOptions","renderLocation","positions","fitBounds","container"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, WMSTileLayer, TileLayer, Polygon, FeatureGroup, useMap } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nfunction mapPositionFromZone(zone): LatLngExpression {\n  if (zone && zone.midpoint) {\n    return { lat: zone.midpoint.latitude, lng: zone.midpoint.longitude };\n  }\n}\n\nconst Map = ({\n  mode = 'view',\n  location,\n  initialZoom = 15,\n  onLocationCreated = (): void => {},\n}: MapProps): JSX.Element => {\n  const initialPosition = mapPositionFromZone(location?.zone) || { lat: 42.829022, lng: -4.849545 };\n\n  const [position] = useState(initialPosition);\n  const [zoom] = useState(initialZoom);\n  const [hasLocationDefined, setHasLocationDefined] = useState(mode === 'view');\n  const map = useMap();\n\n  const renderEditionMode = (mode): JSX.Element => {\n    if (mode !== 'edit') {\n      return null;\n    }\n    const handleOnCreate = (event): void => {\n      if (event.layer?.editing?.latlngs[0][0]) {\n        const coordinates = event.layer?.editing?.latlngs[0][0];\n\n        setHasLocationDefined(true);\n\n        onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n      }\n    };\n\n    const handleOnDelete = (event): void => {\n      if (event.layers?.getLayers().length > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return (\n      <FeatureGroup>\n        <EditControl\n          position=\"topright\"\n          draw={{\n            rectangle: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n            polyline: false,\n            polygon: hasLocationDefined\n              ? false\n              : {\n                  allowIntersection: false,\n                  drawError: {\n                    color: '#e1e100',\n                    message: 'Oops! you cannot draw in that way.',\n                  },\n                  shapeOptions: {\n                    color: '#b5cc18',\n                  },\n                },\n          }}\n          onCreated={handleOnCreate}\n          onDeleted={handleOnDelete}\n        />\n      </FeatureGroup>\n    );\n  };\n\n  const renderLocation = (location): JSX.Element => {\n    if (!location) {\n      return null;\n    }\n\n    const zone = location?.zone;\n    const positions = zone.coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude]);\n    map.fitBounds(positions);\n\n    return <Polygon positions={positions} />;\n  };\n\n  return (\n    <MapLeaflet className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      <WMSTileLayer url=\"https://www.ign.es/wms-inspire/ign-base\" format=\"image/png\" layers=\"IGNBaseOrto\" transparent />\n      {renderEditionMode(mode)}\n      {renderLocation(location)}\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}