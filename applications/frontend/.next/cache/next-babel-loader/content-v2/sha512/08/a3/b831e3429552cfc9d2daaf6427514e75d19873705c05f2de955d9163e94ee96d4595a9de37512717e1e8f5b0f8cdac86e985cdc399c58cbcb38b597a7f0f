{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/sergiosanchez/Projects/fungus/applications/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sergiosanchez/Projects/fungus/applications/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState } from 'react';\nimport { Button, Container, Form, Select, Header as SemanticHeader, Dimmer, Icon } from 'semantic-ui-react';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\nimport fetcher from '../../fetching/fetcher';\nimport makePrediction from './queries/makePrediction';\nimport Header, { ActivePage } from '../../components/Header';\nexport var __N_SSP = true;\nexport default function Predictions(_ref) {\n  var mushrooms = _ref.mushrooms;\n  var router = useRouter();\n\n  var _useState = useState(''),\n      date = _useState[0],\n      setDate = _useState[1];\n\n  var _useState2 = useState(router.query.locationId),\n      locationId = _useState2[0],\n      setLocationId = _useState2[1];\n\n  var _useState3 = useState(''),\n      mushroomId = _useState3[0],\n      setMushroomId = _useState3[1];\n\n  var _useState4 = useState(''),\n      prediction = _useState4[0],\n      setPrediction = _useState4[1];\n\n  var _useState5 = useState(false),\n      active = _useState5[0],\n      setActive = _useState5[1];\n\n  var handleOnSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _response$data;\n\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return makePrediction({\n                date: date,\n                locationId: locationId,\n                mushroomId: mushroomId\n              });\n\n            case 2:\n              response = _context.sent;\n              setPrediction(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.probability);\n              setActive(true);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleOnSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleClose = function handleClose() {\n    return setActive(false);\n  };\n\n  var handleOnChangeLocation = function handleOnChangeLocation(_, data) {\n    setLocationId(data.value);\n    router.push(\"predictions/?locationId=\".concat(data.value), undefined, {\n      shallow: true\n    });\n  };\n\n  function transformLocationsInOptions() {\n    var result = useSWR(\"/api/me/locations\", fetcher);\n    var locations = result.data; // const error: Error = result.error;\n    // if (error) {\n    //   return <div>Loading failed: {error.message}</div>;\n    // }\n    // if (!locations) {\n    //   return <div>Loading...</div>;\n    // }\n\n    return locations === null || locations === void 0 ? void 0 : locations.map(function (location) {\n      return {\n        key: location.id,\n        value: location.id,\n        text: location.name\n      };\n    });\n  }\n\n  function transformMushroomsInOptions() {\n    return mushrooms.map(function (mushroom) {\n      return {\n        key: mushroom.id,\n        value: mushroom.id,\n        text: mushroom.scientificName\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      activePage: ActivePage.predictions\n    }), /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsxs(Form, {\n        onSubmit: handleOnSubmit,\n        children: [/*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"\\xBFCu\\xE1ndo?\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"date\",\n            onChange: function onChange(e) {\n              return setDate(e.target.value);\n            },\n            placeholder: \"Introduce fecha\"\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"\\xBFQu\\xE9 seta?\"\n          }), /*#__PURE__*/_jsx(Select, {\n            placeholder: \"Seleciona especie\",\n            options: transformMushroomsInOptions() // @ts-ignore\n            ,\n            onChange: function onChange(_, data) {\n              return setMushroomId(data.value);\n            }\n          })]\n        }), /*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"\\xBFPara qu\\xE9 localizaci\\xF3n?\"\n          }), /*#__PURE__*/_jsx(Select, {\n            placeholder: \"Seleciona localizaci\\xF3n\",\n            options: transformLocationsInOptions(),\n            onChange: handleOnChangeLocation,\n            value: locationId\n          })]\n        }), /*#__PURE__*/_jsx(Button, {\n          floated: 'right',\n          type: \"submit\",\n          primary: true,\n          children: \"Mostrar predicci\\xF3n\"\n        })]\n      }), /*#__PURE__*/_jsx(Dimmer, {\n        active: active,\n        onClickOutside: handleClose,\n        page: true,\n        children: /*#__PURE__*/_jsxs(SemanticHeader, {\n          as: \"h2\",\n          icon: true,\n          inverted: true,\n          children: [/*#__PURE__*/_jsx(Icon, {\n            name: \"heart\"\n          }), /*#__PURE__*/_jsx(SemanticHeader.Subheader, {\n            children: prediction\n          })]\n        })\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}