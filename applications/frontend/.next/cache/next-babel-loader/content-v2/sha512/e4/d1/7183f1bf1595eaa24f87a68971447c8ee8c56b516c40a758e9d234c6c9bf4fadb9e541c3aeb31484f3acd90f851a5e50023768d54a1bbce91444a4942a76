{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/Map/MapEditionControls.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nvar MapEditionControls = function MapEditionControls(_ref) {\n  _s();\n\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'view' : _ref$mode,\n      _ref$onLocationCreate = _ref.onLocationCreated,\n      onLocationCreated = _ref$onLocationCreate === void 0 ? function () {} : _ref$onLocationCreate;\n\n  var _useState = useState(mode === 'view'),\n      hasLocationDefined = _useState[0],\n      setHasLocationDefined = _useState[1];\n\n  if (mode !== 'edit') {\n    return null;\n  }\n\n  var handleOnCreate = function handleOnCreate(event) {\n    var _event$layer, _event$layer$editing;\n\n    if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n      var _event$layer2, _event$layer2$editing;\n\n      var coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n      setHasLocationDefined(true);\n      onLocationCreated(coordinates.map(function (coordinate) {\n        return {\n          latitude: coordinate.lat,\n          longitude: coordinate.lng\n        };\n      }));\n    }\n  };\n\n  var handleOnDelete = function handleOnDelete(event) {\n    var _event$layers;\n\n    if (((_event$layers = event.layers) === null || _event$layers === void 0 ? void 0 : _event$layers.getLayers().length) > 0) {\n      setHasLocationDefined(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n    children: /*#__PURE__*/_jsxDEV(EditControl, {\n      position: \"topright\",\n      draw: {\n        rectangle: false,\n        circle: false,\n        marker: false,\n        circlemarker: false,\n        polyline: false,\n        polygon: hasLocationDefined ? false : {\n          allowIntersection: false,\n          drawError: {\n            color: '#e1e100',\n            message: 'Oops! you cannot draw in that way.'\n          },\n          shapeOptions: {\n            color: '#b5cc18'\n          }\n        }\n      },\n      onCreated: handleOnCreate,\n      onDeleted: handleOnDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MapEditionControls, \"tztZ+wjYt6O45Kns9LTuGTYweVE=\");\n\n_c = MapEditionControls;\nexport default MapEditionControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapEditionControls\");","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/Map/MapEditionControls.tsx"],"names":["React","useState","FeatureGroup","EditControl","MapEditionControls","mode","onLocationCreated","hasLocationDefined","setHasLocationDefined","handleOnCreate","event","layer","editing","latlngs","coordinates","map","coordinate","latitude","lat","longitude","lng","handleOnDelete","layers","getLayers","length","rectangle","circle","marker","circlemarker","polyline","polygon","allowIntersection","drawError","color","message","shapeOptions"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AASA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAkF;AAAA;;AAAA,uBAA/EC,IAA+E;AAAA,MAA/EA,IAA+E,0BAAxE,MAAwE;AAAA,mCAAhEC,iBAAgE;AAAA,MAAhEA,iBAAgE,sCAA5C,YAAY,CAAE,CAA8B;;AAAA,kBACvDL,QAAQ,CAACI,IAAI,KAAK,MAAV,CAD+C;AAAA,MACpGE,kBADoG;AAAA,MAChFC,qBADgF;;AAG3G,MAAIH,IAAI,KAAK,MAAb,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,MAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAiB;AAAA;;AACtC,wBAAIA,KAAK,CAACC,KAAV,iEAAI,aAAaC,OAAjB,iDAAI,qBAAsBC,OAAtB,CAA8B,CAA9B,EAAiC,CAAjC,CAAJ,EAAyC;AAAA;;AACvC,UAAMC,WAAW,oBAAGJ,KAAK,CAACC,KAAT,2EAAG,cAAaC,OAAhB,0DAAG,sBAAsBC,OAAtB,CAA8B,CAA9B,EAAiC,CAAjC,CAApB;AAEAL,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AAEAF,MAAAA,iBAAiB,CAACQ,WAAW,CAACC,GAAZ,CAAgB,UAACC,UAAD;AAAA,eAAiB;AAAEC,UAAAA,QAAQ,EAAED,UAAU,CAACE,GAAvB;AAA4BC,UAAAA,SAAS,EAAEH,UAAU,CAACI;AAAlD,SAAjB;AAAA,OAAhB,CAAD,CAAjB;AACD;AACF,GARD;;AAUA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACX,KAAD,EAAiB;AAAA;;AACtC,QAAI,kBAAAA,KAAK,CAACY,MAAN,gEAAcC,SAAd,GAA0BC,MAA1B,IAAmC,CAAvC,EAA0C;AACxChB,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GAJD;;AAMA,sBACE,QAAC,YAAD;AAAA,2BACE,QAAC,WAAD;AACE,MAAA,QAAQ,EAAC,UADX;AAEE,MAAA,IAAI,EAAE;AACJiB,QAAAA,SAAS,EAAE,KADP;AAEJC,QAAAA,MAAM,EAAE,KAFJ;AAGJC,QAAAA,MAAM,EAAE,KAHJ;AAIJC,QAAAA,YAAY,EAAE,KAJV;AAKJC,QAAAA,QAAQ,EAAE,KALN;AAMJC,QAAAA,OAAO,EAAEvB,kBAAkB,GACvB,KADuB,GAEvB;AACEwB,UAAAA,iBAAiB,EAAE,KADrB;AAEEC,UAAAA,SAAS,EAAE;AACTC,YAAAA,KAAK,EAAE,SADE;AAETC,YAAAA,OAAO,EAAE;AAFA,WAFb;AAMEC,UAAAA,YAAY,EAAE;AACZF,YAAAA,KAAK,EAAE;AADK;AANhB;AARA,OAFR;AAqBE,MAAA,SAAS,EAAExB,cArBb;AAsBE,MAAA,SAAS,EAAEY;AAtBb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AA4BD,CAnDD;;GAAMjB,kB;;KAAAA,kB;AAqDN,eAAeA,kBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nconst MapEditionControls = ({ mode = 'view', onLocationCreated = (): void => {} }: MapProps): JSX.Element => {\n  const [hasLocationDefined, setHasLocationDefined] = useState(mode === 'view');\n\n  if (mode !== 'edit') {\n    return null;\n  }\n\n  const handleOnCreate = (event): void => {\n    if (event.layer?.editing?.latlngs[0][0]) {\n      const coordinates = event.layer?.editing?.latlngs[0][0];\n\n      setHasLocationDefined(true);\n\n      onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n    }\n  };\n\n  const handleOnDelete = (event): void => {\n    if (event.layers?.getLayers().length > 0) {\n      setHasLocationDefined(false);\n    }\n  };\n\n  return (\n    <FeatureGroup>\n      <EditControl\n        position=\"topright\"\n        draw={{\n          rectangle: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polyline: false,\n          polygon: hasLocationDefined\n            ? false\n            : {\n                allowIntersection: false,\n                drawError: {\n                  color: '#e1e100',\n                  message: 'Oops! you cannot draw in that way.',\n                },\n                shapeOptions: {\n                  color: '#b5cc18',\n                },\n              },\n        }}\n        onCreated={handleOnCreate}\n        onDeleted={handleOnDelete}\n      />\n    </FeatureGroup>\n  );\n};\n\nexport default MapEditionControls;\n"]},"metadata":{},"sourceType":"module"}