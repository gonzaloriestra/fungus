{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react'; // import { WMSTileLayer, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\n// import { LatLngExpression } from 'leaflet';\n\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromZone(zone) {\n  if (zone && zone.midpoint) {\n    return {\n      lat: zone.midpoint.latitude,\n      lng: zone.midpoint.longitude\n    };\n  }\n}\n\nvar Map = function Map(_ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'view' : _ref$mode,\n      location = _ref.location,\n      _ref$initialZoom = _ref.initialZoom,\n      initialZoom = _ref$initialZoom === void 0 ? 15 : _ref$initialZoom,\n      _ref$onLocationCreate = _ref.onLocationCreated,\n      onLocationCreated = _ref$onLocationCreate === void 0 ? function () {} : _ref$onLocationCreate;\n  var initialPosition = mapPositionFromZone(location === null || location === void 0 ? void 0 : location.zone) || {\n    lat: 42.829022,\n    lng: -4.849545\n  };\n\n  var _useState = useState(initialPosition),\n      position = _useState[0];\n\n  var _useState2 = useState(initialZoom),\n      zoom = _useState2[0];\n\n  var _useState3 = useState(mode === 'view'),\n      hasLocationDefined = _useState3[0],\n      setHasLocationDefined = _useState3[1];\n\n  var _useState4 = useState(undefined),\n      Map = _useState4[0],\n      setMap = _useState4[1];\n\n  var renderEditionMode = function renderEditionMode(mode) {\n    if (mode !== 'edit') {\n      return null;\n    }\n\n    var handleOnCreate = function handleOnCreate(event) {\n      var _event$layer, _event$layer$editing;\n\n      if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n        var _event$layer2, _event$layer2$editing;\n\n        var coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n        setHasLocationDefined(true);\n        onLocationCreated(coordinates.map(function (coordinate) {\n          return {\n            latitude: coordinate.lat,\n            longitude: coordinate.lng\n          };\n        }));\n      }\n    };\n\n    var handleOnDelete = function handleOnDelete(event) {\n      var _event$layers;\n\n      if (((_event$layers = event.layers) === null || _event$layers === void 0 ? void 0 : _event$layers.getLayers().length) > 0) {\n        setHasLocationDefined(false);\n      }\n    };\n\n    return /*#__PURE__*/_jsx(FeatureGroup, {\n      children: /*#__PURE__*/_jsx(EditControl, {\n        position: \"topright\",\n        draw: {\n          rectangle: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polyline: false,\n          polygon: hasLocationDefined ? false : {\n            allowIntersection: false,\n            drawError: {\n              color: '#e1e100',\n              message: 'Oops! you cannot draw in that way.'\n            },\n            shapeOptions: {\n              color: '#b5cc18'\n            }\n          }\n        },\n        onCreated: handleOnCreate,\n        onDeleted: handleOnDelete\n      })\n    });\n  };\n\n  var renderLocation = function renderLocation(location) {\n    if (!location) {\n      return null;\n    }\n\n    var zone = location === null || location === void 0 ? void 0 : location.zone;\n    return /*#__PURE__*/_jsx(Polygon, {\n      positions: zone.coordinates.map(function (coordinate) {\n        return [coordinate.latitude, coordinate.longitude];\n      })\n    });\n  };\n\n  useEffect(function () {\n    var Map = require('react-leaflet').Map;\n\n    setMap(Map);\n  });\n  return Map ? /*#__PURE__*/_jsxs(Map, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    children: [/*#__PURE__*/_jsx(TileLayer, {\n      url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    }), /*#__PURE__*/_jsx(WMSTileLayer, {\n      url: \"https://www.ign.es/wms-inspire/ign-base\",\n      format: \"image/png\",\n      layers: \"IGNBaseOrto\",\n      transparent: true\n    }), renderEditionMode(mode), renderLocation(location)]\n  }) : null;\n};\n\nexport default Map;","map":null,"metadata":{},"sourceType":"module"}