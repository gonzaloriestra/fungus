{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/Map/MapEditionControls.tsx\";\nimport React, { useState } from 'react';\nimport { FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nconst MapEditionControls = ({\n  mode = 'view',\n  onLocationCreated = () => {}\n}) => {\n  const {\n    0: hasLocationDefined,\n    1: setHasLocationDefined\n  } = useState(mode === 'view');\n\n  if (mode !== 'edit') {\n    return null;\n  }\n\n  const handleOnCreate = event => {\n    var _event$layer, _event$layer$editing;\n\n    if ((_event$layer = event.layer) !== null && _event$layer !== void 0 && (_event$layer$editing = _event$layer.editing) !== null && _event$layer$editing !== void 0 && _event$layer$editing.latlngs[0][0]) {\n      var _event$layer2, _event$layer2$editing;\n\n      const coordinates = (_event$layer2 = event.layer) === null || _event$layer2 === void 0 ? void 0 : (_event$layer2$editing = _event$layer2.editing) === null || _event$layer2$editing === void 0 ? void 0 : _event$layer2$editing.latlngs[0][0];\n      setHasLocationDefined(true);\n      onLocationCreated(coordinates.map(coordinate => ({\n        latitude: coordinate.lat,\n        longitude: coordinate.lng\n      })));\n    }\n  };\n\n  const handleOnDelete = event => {\n    var _event$layers;\n\n    if (((_event$layers = event.layers) === null || _event$layers === void 0 ? void 0 : _event$layers.getLayers().length) > 0) {\n      setHasLocationDefined(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n    children: /*#__PURE__*/_jsxDEV(EditControl, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\nexport default MapEditionControls;","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/components/Map/MapEditionControls.tsx"],"names":["React","useState","FeatureGroup","EditControl","MapEditionControls","mode","onLocationCreated","hasLocationDefined","setHasLocationDefined","handleOnCreate","event","layer","editing","latlngs","coordinates","map","coordinate","latitude","lat","longitude","lng","handleOnDelete","layers","getLayers","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AASA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,MAAT;AAAiBC,EAAAA,iBAAiB,GAAG,MAAY,CAAE;AAAnD,CAAD,KAAkF;AAC3G,QAAM;AAAA,OAACC,kBAAD;AAAA,OAAqBC;AAArB,MAA8CP,QAAQ,CAACI,IAAI,KAAK,MAAV,CAA5D;;AAEA,MAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,QAAMI,cAAc,GAAIC,KAAD,IAAiB;AAAA;;AACtC,wBAAIA,KAAK,CAACC,KAAV,iEAAI,aAAaC,OAAjB,iDAAI,qBAAsBC,OAAtB,CAA8B,CAA9B,EAAiC,CAAjC,CAAJ,EAAyC;AAAA;;AACvC,YAAMC,WAAW,oBAAGJ,KAAK,CAACC,KAAT,2EAAG,cAAaC,OAAhB,0DAAG,sBAAsBC,OAAtB,CAA8B,CAA9B,EAAiC,CAAjC,CAApB;AAEAL,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AAEAF,MAAAA,iBAAiB,CAACQ,WAAW,CAACC,GAAZ,CAAiBC,UAAD,KAAiB;AAAEC,QAAAA,QAAQ,EAAED,UAAU,CAACE,GAAvB;AAA4BC,QAAAA,SAAS,EAAEH,UAAU,CAACI;AAAlD,OAAjB,CAAhB,CAAD,CAAjB;AACD;AACF,GARD;;AAUA,QAAMC,cAAc,GAAIX,KAAD,IAAiB;AAAA;;AACtC,QAAI,kBAAAA,KAAK,CAACY,MAAN,gEAAcC,SAAd,GAA0BC,MAA1B,IAAmC,CAAvC,EAA0C;AACxChB,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GAJD;;AAMA,sBACE,QAAC,YAAD;AAAA,2BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CApDD;;AAsDA,eAAeJ,kBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Coordinate from '../../models/Coordinate';\n\ntype MapProps = {\n  mode?: string;\n  onLocationCreated?: (zone: Array<Coordinate>) => void;\n};\n\nconst MapEditionControls = ({ mode = 'view', onLocationCreated = (): void => {} }: MapProps): JSX.Element => {\n  const [hasLocationDefined, setHasLocationDefined] = useState(mode === 'view');\n\n  if (mode !== 'edit') {\n    return null;\n  }\n\n  const handleOnCreate = (event): void => {\n    if (event.layer?.editing?.latlngs[0][0]) {\n      const coordinates = event.layer?.editing?.latlngs[0][0];\n\n      setHasLocationDefined(true);\n\n      onLocationCreated(coordinates.map((coordinate) => ({ latitude: coordinate.lat, longitude: coordinate.lng })));\n    }\n  };\n\n  const handleOnDelete = (event): void => {\n    if (event.layers?.getLayers().length > 0) {\n      setHasLocationDefined(false);\n    }\n  };\n\n  return (\n    <FeatureGroup>\n      <EditControl />\n      {/*<EditControl*/}\n      {/*  position=\"topright\"*/}\n      {/*  draw={{*/}\n      {/*    rectangle: false,*/}\n      {/*    circle: false,*/}\n      {/*    marker: false,*/}\n      {/*    circlemarker: false,*/}\n      {/*    polyline: false,*/}\n      {/*    polygon: hasLocationDefined*/}\n      {/*      ? false*/}\n      {/*      : {*/}\n      {/*          allowIntersection: false,*/}\n      {/*          drawError: {*/}\n      {/*            color: '#e1e100',*/}\n      {/*            message: 'Oops! you cannot draw in that way.',*/}\n      {/*          },*/}\n      {/*          shapeOptions: {*/}\n      {/*            color: '#b5cc18',*/}\n      {/*          },*/}\n      {/*        },*/}\n      {/*  }}*/}\n      {/*  onCreated={handleOnCreate}*/}\n      {/*  onDeleted={handleOnDelete}*/}\n      {/*/>*/}\n    </FeatureGroup>\n  );\n};\n\nexport default MapEditionControls;\n"]},"metadata":{},"sourceType":"module"}