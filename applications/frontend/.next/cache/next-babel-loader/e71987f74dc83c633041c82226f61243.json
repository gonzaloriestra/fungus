{"ast":null,"code":"var _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport styles from './map.module.css';\n\nfunction mapPositionFromArea(area) {\n  if (area && area.length) {\n    return {\n      lat: area[0].latitude,\n      lng: area[0].longitude\n    };\n  }\n}\n\nfunction handleOnCreate(event) {\n  console.log(event.layer.editing.latlngs);\n}\n\nconst Map = ({\n  location,\n  initialZoom = 15\n}) => {\n  const {\n    0: position\n  } = useState(mapPositionFromArea(area));\n  const {\n    0: zoom\n  } = useState(initialZoom);\n\n  const renderEdition = () => {};\n\n  const renderLocation = () => {\n    if (!location) {\n      return null;\n    }\n\n    const area = location === null || location === void 0 ? void 0 : location.area;\n    return __jsx(Polygon, {\n      positions: area.map(coordinate => [coordinate.latitude, coordinate.longitude]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 12\n      }\n    });\n  };\n\n  return __jsx(MapLeaflet, {\n    className: styles.container,\n    center: position,\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(TileLayer, {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), __jsx(FeatureGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(EditControl, {\n    position: \"topright\",\n    draw: {\n      rectangle: false,\n      circle: false,\n      marker: false,\n      circlemarker: false,\n      polyline: false\n    },\n    onCreated: handleOnCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })), renderLocation());\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","TileLayer","Polygon","FeatureGroup","EditControl","styles","mapPositionFromArea","area","length","lat","latitude","lng","longitude","handleOnCreate","event","console","log","layer","editing","latlngs","location","initialZoom","position","zoom","renderEdition","renderLocation","map","coordinate","container","rectangle","circle","marker","circlemarker","polyline"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgDC,YAAhD,QAAoE,eAApE;AAEA,SAASC,WAAT,QAA4B,oBAA5B;AAIA,OAAOC,MAAP,MAAmB,kBAAnB;;AAQA,SAASC,mBAAT,CAA6BC,IAA7B,EAAqD;AACnD,MAAIA,IAAI,IAAIA,IAAI,CAACC,MAAjB,EAAyB;AACvB,WAAO;AAAEC,MAAAA,GAAG,EAAEF,IAAI,CAAC,CAAD,CAAJ,CAAQG,QAAf;AAAyBC,MAAAA,GAAG,EAAEJ,IAAI,CAAC,CAAD,CAAJ,CAAQK;AAAtC,KAAP;AACD;AACF;;AAED,SAASC,cAAT,CAAwBC,KAAxB,EAAqC;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,KAAN,CAAYC,OAAZ,CAAoBC,OAAhC;AACD;;AAED,MAAMpB,GAAG,GAAG,CAAC;AAAEqB,EAAAA,QAAF;AAAYC,EAAAA,WAAW,GAAG;AAA1B,CAAD,KAA2D;AACrE,QAAM;AAAA,OAACC;AAAD,MAAaxB,QAAQ,CAACQ,mBAAmB,CAACC,IAAD,CAApB,CAA3B;AACA,QAAM;AAAA,OAACgB;AAAD,MAASzB,QAAQ,CAACuB,WAAD,CAAvB;;AAEA,QAAMG,aAAa,GAAG,MAAM,CAAE,CAA9B;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAI,CAACL,QAAL,EAAe;AACb,aAAO,IAAP;AACD;;AAED,UAAMb,IAAI,GAAGa,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEb,IAAvB;AAEA,WAAO,MAAC,OAAD;AAAS,MAAA,SAAS,EAAEA,IAAI,CAACmB,GAAL,CAAUC,UAAD,IAAgB,CAACA,UAAU,CAACjB,QAAZ,EAAsBiB,UAAU,CAACf,SAAjC,CAAzB,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GARD;;AAUA,SACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAEP,MAAM,CAACuB,SAA9B;AAAyC,IAAA,MAAM,EAAEN,QAAjD;AAA2D,IAAA,IAAI,EAAEC,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,GAAG,EAAC,+FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAC,UADX;AAEE,IAAA,IAAI,EAAE;AACJM,MAAAA,SAAS,EAAE,KADP;AAEJC,MAAAA,MAAM,EAAE,KAFJ;AAGJC,MAAAA,MAAM,EAAE,KAHJ;AAIJC,MAAAA,YAAY,EAAE,KAJV;AAKJC,MAAAA,QAAQ,EAAE;AALN,KAFR;AASE,IAAA,SAAS,EAAEpB,cATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAeGY,cAAc,EAfjB,CADF;AAmBD,CAnCD;;AAqCA,eAAe1B,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon, FeatureGroup } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nimport Location from '../../models/Location';\n\nimport styles from './map.module.css';\n\ntype MapProps = {\n  mode?: string;\n  location?: Location;\n  initialZoom?: number;\n};\n\nfunction mapPositionFromArea(area): LatLngExpression {\n  if (area && area.length) {\n    return { lat: area[0].latitude, lng: area[0].longitude };\n  }\n}\n\nfunction handleOnCreate(event): void {\n  console.log(event.layer.editing.latlngs);\n}\n\nconst Map = ({ location, initialZoom = 15 }: MapProps): JSX.Element => {\n  const [position] = useState(mapPositionFromArea(area));\n  const [zoom] = useState(initialZoom);\n\n  const renderEdition = () => {};\n\n  const renderLocation = () => {\n    if (!location) {\n      return null;\n    }\n\n    const area = location?.area;\n\n    return <Polygon positions={area.map((coordinate) => [coordinate.latitude, coordinate.longitude])} />;\n  };\n\n  return (\n    <MapLeaflet className={styles.container} center={position} zoom={zoom}>\n      <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n      <FeatureGroup>\n        <EditControl\n          position=\"topright\"\n          draw={{\n            rectangle: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n            polyline: false,\n          }}\n          onCreated={handleOnCreate}\n        />\n      </FeatureGroup>\n      {renderLocation()}\n    </MapLeaflet>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}