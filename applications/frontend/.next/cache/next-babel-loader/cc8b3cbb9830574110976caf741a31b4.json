{"ast":null,"code":"var _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/[id].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport L from 'leaflet';\nimport getLocation from './queries/getLocation';\nconst center = [51.505, -0.09];\nconst polygon = [[51.515, -0.09], [51.52, -0.1], [51.52, -0.12]];\nconst multiPolygon = [[[51.51, -0.12], [51.51, -0.13], [51.53, -0.13]], [[51.51, -0.05], [51.51, -0.07], [51.53, -0.07]]]; // const DynamicComponentWithNoSSR = dynamic(() => import('./components/Map'), { ssr: false });\n\nexport default function LocationDetails({\n  location\n}) {\n  const map = L.map('map');\n  map.setView([47.63, -122.32], 11);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    style: {\n      height: '300px'\n    },\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }));\n}\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const res = await getLocation({\n    id: params.id\n  });\n  return {\n    props: {\n      location: res.data\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/[id].tsx"],"names":["React","L","getLocation","center","polygon","multiPolygon","LocationDetails","location","map","setView","height","getServerSideProps","params","res","id","props","data"],"mappings":";;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AAKA,OAAOC,CAAP,MAAc,SAAd;AAIA,OAAOC,WAAP,MAAwB,uBAAxB;AAQA,MAAMC,MAAM,GAAG,CAAC,MAAD,EAAS,CAAC,IAAV,CAAf;AAEA,MAAMC,OAAO,GAAG,CACd,CAAC,MAAD,EAAS,CAAC,IAAV,CADc,EAEd,CAAC,KAAD,EAAQ,CAAC,GAAT,CAFc,EAGd,CAAC,KAAD,EAAQ,CAAC,IAAT,CAHc,CAAhB;AAMA,MAAMC,YAAY,GAAG,CACnB,CACE,CAAC,KAAD,EAAQ,CAAC,IAAT,CADF,EAEE,CAAC,KAAD,EAAQ,CAAC,IAAT,CAFF,EAGE,CAAC,KAAD,EAAQ,CAAC,IAAT,CAHF,CADmB,EAMnB,CACE,CAAC,KAAD,EAAQ,CAAC,IAAT,CADF,EAEE,CAAC,KAAD,EAAQ,CAAC,IAAT,CAFF,EAGE,CAAC,KAAD,EAAQ,CAAC,IAAT,CAHF,CANmB,CAArB,C,CAaA;;AAEA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAmE;AAChF,QAAMC,GAAG,GAAGP,CAAC,CAACO,GAAF,CAAM,KAAN,CAAZ;AACAA,EAAAA,GAAG,CAACC,OAAJ,CAAY,CAAC,KAAD,EAAQ,CAAC,MAAT,CAAZ,EAA8B,EAA9B;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAiC,IAAA,EAAE,EAAC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA0BD;AAED,OAAO,MAAMC,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC1E,QAAMC,GAAG,GAAG,MAAMX,WAAW,CAAC;AAAEY,IAAAA,EAAE,EAAEF,MAAM,CAACE;AAAb,GAAD,CAA7B;AAEA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAER,MAAAA,QAAQ,EAAEM,GAAG,CAACG;AAAhB;AAAT,GAAP;AACD,CAJM","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Item as SemanticItem } from 'semantic-ui-react';\nimport { Container as SemanticContainer } from 'semantic-ui-react';\nimport { GetServerSideProps } from 'next';\nimport Head from 'next/head';\nimport L from 'leaflet';\n\nimport dynamic from 'next/dynamic';\nimport Location from './models/Location';\nimport getLocation from './queries/getLocation';\n\nimport Item from './components/Item';\n\ntype LocationProps = {\n  location: Location;\n};\n\nconst center = [51.505, -0.09];\n\nconst polygon = [\n  [51.515, -0.09],\n  [51.52, -0.1],\n  [51.52, -0.12],\n];\n\nconst multiPolygon = [\n  [\n    [51.51, -0.12],\n    [51.51, -0.13],\n    [51.53, -0.13],\n  ],\n  [\n    [51.51, -0.05],\n    [51.51, -0.07],\n    [51.53, -0.07],\n  ],\n];\n\n// const DynamicComponentWithNoSSR = dynamic(() => import('./components/Map'), { ssr: false });\n\nexport default function LocationDetails({ location }: LocationProps): JSX.Element {\n  const map = L.map('map');\n  map.setView([47.63, -122.32], 11);\n  return (\n    <div>\n      <div style={{ height: '300px' }} id=\"map\"></div>\n      {/*{isBrowser && (*/}\n      {/*  <Map center={center} zoom={13}>*/}\n      {/*    <TileLayer*/}\n      {/*      attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'*/}\n      {/*      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"*/}\n      {/*    />*/}\n      {/*    <Circle center={center} fillColor=\"blue\" radius={200} />*/}\n      {/*    <CircleMarker center={[51.51, -0.12]} color=\"red\" radius={20}>*/}\n      {/*      <Popup>Popup in CircleMarker</Popup>*/}\n      {/*    </CircleMarker>*/}\n      {/*    <Polygon color=\"purple\" positions={polygon} />*/}\n      {/*    <Polygon color=\"purple\" positions={multiPolygon} />*/}\n      {/*  </Map>*/}\n      {/*)}*/}\n\n      {/*<SemanticContainer>*/}\n      {/*  <SemanticItem.Group divided>*/}\n      {/*    {<Item key={location.id} title={location.name} imageSrc=\"/map.svg\" detailsUrl={`location/${location.id}`} />}*/}\n      {/*  </SemanticItem.Group>*/}\n      {/*</SemanticContainer>*/}\n      {/*<DynamicComponentWithNoSSR />*/}\n    </div>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const res = await getLocation({ id: params.id });\n\n  return { props: { location: res.data } };\n};\n"]},"metadata":{},"sourceType":"module"}