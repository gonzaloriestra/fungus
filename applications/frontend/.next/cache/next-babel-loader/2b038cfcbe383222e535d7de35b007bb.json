{"ast":null,"code":"var _jsxFileName = \"/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon } from 'react-leaflet';\n\nconst Map = ({\n  location,\n  initialZoom = 15\n}) => {\n  const coordinates = location === null || location === void 0 ? void 0 : location.coordinates;\n  const {\n    0: position\n  } = useState(mapPositionFromCoordinates(coordinates));\n  const {\n    0: zoom\n  } = useState(initialZoom);\n  return __jsx(\"div\", {\n    style: {\n      height: '1000px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(MapLeaflet, {\n    center: position,\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), __jsx(Polygon, {\n    positions: coordinates.map(coordinate => [coordinate.latitude, coordinate.longitude]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Map;\n\nfunction mapPositionFromCoordinates(coordinates) {\n  if (coordinates && coordinates.length) {\n    return {\n      lat: coordinates[0].latitude,\n      lng: coordinates[0].longitude\n    };\n  }\n}","map":{"version":3,"sources":["/Users/sergiosanchez/Projects/fungus/applications/frontend/src/pages/locations/components/Map/Map.tsx"],"names":["React","useState","Map","MapLeaflet","TileLayer","Polygon","location","initialZoom","coordinates","position","mapPositionFromCoordinates","zoom","height","map","coordinate","latitude","longitude","length","lat","lng"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,QAAsD,eAAtD;;AAUA,MAAMH,GAAG,GAAG,CAAC;AAAEI,EAAAA,QAAF;AAAYC,EAAAA,WAAW,GAAG;AAA1B,CAAD,KAA2D;AACrE,QAAMC,WAAW,GAAGF,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEE,WAA9B;AAEA,QAAM;AAAA,OAACC;AAAD,MAAaR,QAAQ,CAACS,0BAA0B,CAACF,WAAD,CAA3B,CAA3B;AACA,QAAM;AAAA,OAACG;AAAD,MAASV,QAAQ,CAACM,WAAD,CAAvB;AAEA,SACE;AACE,IAAA,KAAK,EAAE;AACLK,MAAAA,MAAM,EAAE;AADH,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,UAAD;AAAY,IAAA,MAAM,EAAEH,QAApB;AAA8B,IAAA,IAAI,EAAEE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,GAAG,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAS,IAAA,SAAS,EAAEH,WAAW,CAACK,GAAZ,CAAiBC,UAAD,IAAgB,CAACA,UAAU,CAACC,QAAZ,EAAsBD,UAAU,CAACE,SAAjC,CAAhC,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CALF,CADF;AAYD,CAlBD;;AAoBA,eAAed,GAAf;;AAEA,SAASQ,0BAAT,CAAoCF,WAApC,EAAmE;AACjE,MAAIA,WAAW,IAAIA,WAAW,CAACS,MAA/B,EAAuC;AACrC,WAAO;AAAEC,MAAAA,GAAG,EAAEV,WAAW,CAAC,CAAD,CAAX,CAAeO,QAAtB;AAAgCI,MAAAA,GAAG,EAAEX,WAAW,CAAC,CAAD,CAAX,CAAeQ;AAApD,KAAP;AACD;AACF","sourcesContent":["import React, { useState } from 'react';\nimport { Map as MapLeaflet, TileLayer, Polygon } from 'react-leaflet';\nimport { LatLngExpression } from 'leaflet';\n\nimport Location from '../../models/Location';\n\ntype MapProps = {\n  location: Location;\n  initialZoom?: number;\n};\n\nconst Map = ({ location, initialZoom = 15 }: MapProps): JSX.Element => {\n  const coordinates = location?.coordinates;\n\n  const [position] = useState(mapPositionFromCoordinates(coordinates));\n  const [zoom] = useState(initialZoom);\n\n  return (\n    <div\n      style={{\n        height: '1000px',\n      }}\n    >\n      <MapLeaflet center={position} zoom={zoom}>\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n        <Polygon positions={coordinates.map((coordinate) => [coordinate.latitude, coordinate.longitude])} />\n      </MapLeaflet>\n    </div>\n  );\n};\n\nexport default Map;\n\nfunction mapPositionFromCoordinates(coordinates): LatLngExpression {\n  if (coordinates && coordinates.length) {\n    return { lat: coordinates[0].latitude, lng: coordinates[0].longitude };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}